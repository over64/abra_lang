import tables, strutils

var wordFrequencies = initCountTable[string]()

for line in stdin.lines:
  for word in line.split(", "):
    wordFrequencies.inc(word)

echo "The most frequent word is '", wordFrequencies.largest, "'"

import abra.io
import abra.hashMap

def main =
    val counts = hashMap.make[String, Int]()

    io.stdin.byLine({ line ->
        line.split(' ', { word ->
            val count = match counts(word) of i: Int -> i + 1 else 0
            counts(word) = count
        })
    }) .


import abra.io
import abra.hashMap

def main =
    val counts = hashMap.make[String, Int]

    io.stdin.byLine> \line ->
        line.split> ' ', \word ->
            val count = match counts(word) case i: Int do i + 1 else 0
            counts(word) = count ...

def main =
    def printHello = \n ->
        io.println('hello, $n!') .

    Vec3>1, 2, 3 .

    500.times> \n ->
        printHello(n) ..

def main = `
    val counts = hashMap.make[String, Int]

    io.stdin.byLine` \line ->
        line.split` ' ', \word ->
            val count = match counts(word) case i: Int do i + 1 else 0
            counts(word) = count ```

def main `
    def printHello `\n ->
        io.println('hello, $n!') `

    Vec3>1, 2, 3 `

    500.times> \n ->
        printHello(n) ``


def main =
    val counts = hashMap.make[String, Int]

    io.stdin.byLine: \line ->
        line.split: ' ', \word ->
            val count = match counts(word) case i: Int do i + 1 else 0 .
            counts(word) = count ...

def main =
    def printHello = \n ->
        io.println('hello, $n!') .

    do Vec3 with 1, 2, 3 .

    do 500.times with \n ->
        printHello(n) ..


import abra.io
import abra.hashMap

def main =
    val counts = hashMap.make[String, Int]

    io.stdin.byLine(line ->
        line.split(' ', word ->
            val count = match counts(word) of i: Int -> i + 1 else 0
            counts(word) = count)) .

import abra/ast with Term, Add, Sub, Mul, Div

def main =
    Add:
        Term(1),
        Add:
            Sub: Term(2), Term(1) .,
            Term(1) ..

def main =
    Add>
        Term> 1 .,
        Add>
            Sub> Term> 2 ., Term> 1 ..,
            Term> 1 ...

def main =
    Add(
        Term(1),
        Add(
            Sub(Term(2), Term(1)),
            Term(1))) .