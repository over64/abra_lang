type Bar = (y: Int, z: Int)
type Foo = (x: Int, bar: Bar)

def ==: (self: Int, other: Int) -> Boolean = llvm {
  %1 = icmp eq i32 %self, %other
  ret i1 %1
}

def +: (self: Int, other: Int) -> Int = llvm {
  %1 = add nsw i32 %self, %other
  ret i32 %1
}

def main = {
    match Foo(1, Bar(2, 3))
        of Foo(1, bar = Bar(2, z)) -> bar.y + z
}: Int