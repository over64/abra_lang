def +: (self: Int, other: Int) -> Int = llvm {
  %1 = add nsw i32 %self, %other
  ret i32 %1
}

def foo = \fn: () -> Unit ->
    fn()

def bar = \fn: () -> Int ->
    fn()

def main = {
    var x = 0

    # anon function (no closure)
    val y = {
        1
    }()

    # pass fn pointer as param
    val z = bar({
        1
    })

    #store and call
    val closure = {
        x = x + 1
    }
    closure()

    # anon call
    {
        x = x + 1
    }()

    foo(closure)

    foo({
        x = x + 1
    })

    x + y + z
}: Int # 6 expected