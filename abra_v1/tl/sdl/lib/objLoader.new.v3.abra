import abra.buff with FloatBuffer, OutOfRange
import abra.io with IOErr, ReaderErr

type ObjLoadErr = (cause: IOErr)

def readVertex = &buffer: FloatBuffer, line: String ->
    val reader = line.toReader
    reader.drop?('v '.length)
    buffer.add(reader.readFloat?()) # x
    buffer.add(reader.readFloat?()) # y
    buffer.add(reader.readFloat?()) # z

def readTexture = &buffer: FloatBuffer, line: String ->
    val reader = line.toReader
    reader.drop?('vt '.length)
    buffer.add(reader.readFloat?()) # u
    buffer.add(reader.readFloat?()) # v

def readNormal = &buffer: FloatBuffer, line: String ->
    val reader = line.toReader
    reader.drop?('vn '.length)
    buffer.add(reader.readFloat?()) # nx
    buffer.add(reader.readFloat?()) # ny
    buffer.add(reader.readFloat?()) # nz

def readFace = buffer: FloatBuffer, line: String, vert: FloatBuffer, tex: FloatBuffer, nl: FloatBuffer ->
    val reader = line.toReader
    reader.drop?('f '.length)

    (0 to 3).forEach| i ->
        val vertexId = reader.readInt?() - 1
        reader.drop?('/'.length)
        val uvId = reader.readInt?() - 1
        reader.drop?('/'.length)
        val normalId = reader.readInt?() - 1

        buffer.add(vertexBuffer?(vertexId * 3))     # x
        buffer.add(vertexBuffer?(vertexId * 3 + 1)) # y
        buffer.add(vertexBuffer?(vertexId * 3 + 2)) # z

        buffer.add(textureBuffer?(uvId * 2))        # u
        buffer.add(textureBuffer?(uvId * 2 + 1))    # v

        buffer.add(normalBuffer?(normalId * 3))     # nx
        buffer.add(normalBuffer?(normalId * 3 + 1)) # ny
        buffer.add(normalBuffer?(normalId * 3 + 2)) # nz

def load = fname: String ->
    rescue
        val objFile = io.open?(fname, mode='r')

        val vertexBuffer = buff.mkFloat(4)
        val textureBuffer = buff.mkFloat(4)
        val normalBuffer = buff.mkFloat(4)
        val meshBuffer = buff.mkFloat(4)

        objFile.lines.forEach| line ->
            if line.startsWith('v ') then readVertex?(&vertexBuffer, line)
            if line.startsWith('vt ') then readTexture?(&textureBuffer, line)
            if line.startsWith('vn ') then readNormal?(&normalBuffer, line)
            if line.startsWith('f ') then readFace?(&meshBuffer, line, vertexBuffer, textureBuffer, normalBuffer)

        meshBuffer
    of e -> raise ObjLoadErr(e)
: FloatBuffer
    
def main = ->
    Html(
        Head(),
        Body(
            H1('Hello'),
            Div(
                H1('World'))))
: Unit