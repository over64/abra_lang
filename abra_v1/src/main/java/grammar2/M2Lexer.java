// Generated from /home/over/build/test_lang/grammar/M2Lexer.g4 by ANTLR 4.5.3
package grammar2;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class M2Lexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		MINUS=1, PLUS=2, MUL=3, DIV=4, EXCL=5, DOT=6, RB=7, LB=8, COMMA=9, MORE_=10, 
		MORE_EQ=11, LESS=12, LESS_EQ=13, EQ=14, EQEQ=15, NOTEQ=16, SEMI=17, IF=18, 
		THEN=19, ELSE=20, CBO=21, DOLLAR_CBO=22, CBC=23, LOGIC_OR=24, LOGIC_AND=25, 
		WHILE=26, VAL=27, VAR=28, CON=29, ARROW_RIGHT=30, TYPE=31, BACK_SLASH=32, 
		SELF=33, MATCH_SELF=34, DEF=35, IMPORT=36, WITH=37, MATCH=38, OF=39, DASH=40, 
		VERT_LINE=41, LlBegin=42, WS=43, NL=44, COMMENT=45, LlLiteral=46, IntLiteral=47, 
		HexLiteral=48, FloatLiteral=49, BooleanLiteral=50, StringLiteral=51, Id=52, 
		MatchId=53, IrInline=54, LlEnd=55;
	public static final int llvm = 1;
	public static String[] modeNames = {
		"DEFAULT_MODE", "llvm"
	};

	public static final String[] ruleNames = {
		"MINUS", "PLUS", "MUL", "DIV", "EXCL", "DOT", "RB", "LB", "COMMA", "MORE_", 
		"MORE_EQ", "LESS", "LESS_EQ", "EQ", "EQEQ", "NOTEQ", "SEMI", "IF", "THEN", 
		"ELSE", "CBO", "DOLLAR_CBO", "CBC", "LOGIC_OR", "LOGIC_AND", "WHILE", 
		"VAL", "VAR", "CON", "ARROW_RIGHT", "TYPE", "BACK_SLASH", "SELF", "MATCH_SELF", 
		"DEF", "IMPORT", "WITH", "MATCH", "OF", "DASH", "VERT_LINE", "LlBegin", 
		"WS", "NL", "COMMENT", "LlLiteral", "IntLiteral", "HexLiteral", "FloatLiteral", 
		"BooleanLiteral", "StringLiteral", "Id", "MatchId", "IrInline", "LlEnd", 
		"StringElement", "Char", "CharEscapeSeq", "ExponentPart", "Digit", "NonZeroDigit", 
		"HexDigit"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'-'", "'+'", "'*'", "'/'", "'!'", "'.'", "')'", "'('", "','", "'>'", 
		"'>='", "'<'", "'<='", "'='", "'=='", "'!='", "';'", "'if'", "'then'", 
		"'else'", "'{'", "'${'", "'}'", "'||'", "'&&'", "'while'", "'val'", "'var'", 
		"':'", "'->'", "'type'", "'\\'", "'self'", "'$self'", "'def'", "'import'", 
		"'with'", "'match'", "'of'", "'_'", "'|'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "MINUS", "PLUS", "MUL", "DIV", "EXCL", "DOT", "RB", "LB", "COMMA", 
		"MORE_", "MORE_EQ", "LESS", "LESS_EQ", "EQ", "EQEQ", "NOTEQ", "SEMI", 
		"IF", "THEN", "ELSE", "CBO", "DOLLAR_CBO", "CBC", "LOGIC_OR", "LOGIC_AND", 
		"WHILE", "VAL", "VAR", "CON", "ARROW_RIGHT", "TYPE", "BACK_SLASH", "SELF", 
		"MATCH_SELF", "DEF", "IMPORT", "WITH", "MATCH", "OF", "DASH", "VERT_LINE", 
		"LlBegin", "WS", "NL", "COMMENT", "LlLiteral", "IntLiteral", "HexLiteral", 
		"FloatLiteral", "BooleanLiteral", "StringLiteral", "Id", "MatchId", "IrInline", 
		"LlEnd"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public M2Lexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "M2Lexer.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\29\u019f\b\1\b\1\4"+
		"\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n"+
		"\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t"+
		"=\4>\t>\4?\t?\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b"+
		"\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\17\3\17"+
		"\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24"+
		"\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\30\3\30"+
		"\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34"+
		"\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3 \3"+
		" \3!\3!\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%"+
		"\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3)\3)\3*\3*"+
		"\3+\3+\3+\3+\3+\3+\7+\u0109\n+\f+\16+\u010c\13+\3+\3+\3+\3+\3,\6,\u0113"+
		"\n,\r,\16,\u0114\3,\3,\3-\5-\u011a\n-\3-\3-\3.\3.\7.\u0120\n.\f.\16.\u0123"+
		"\13.\3.\3.\3/\3/\3/\3/\3\60\5\60\u012c\n\60\3\60\3\60\3\60\7\60\u0131"+
		"\n\60\f\60\16\60\u0134\13\60\5\60\u0136\n\60\3\61\3\61\3\61\6\61\u013b"+
		"\n\61\r\61\16\61\u013c\3\62\5\62\u0140\n\62\3\62\6\62\u0143\n\62\r\62"+
		"\16\62\u0144\3\62\3\62\6\62\u0149\n\62\r\62\16\62\u014a\3\62\5\62\u014e"+
		"\n\62\3\62\6\62\u0151\n\62\r\62\16\62\u0152\3\62\3\62\5\62\u0157\n\62"+
		"\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0162\n\63\3\64\3\64"+
		"\7\64\u0166\n\64\f\64\16\64\u0169\13\64\3\64\3\64\3\65\6\65\u016e\n\65"+
		"\r\65\16\65\u016f\3\65\3\65\7\65\u0174\n\65\f\65\16\65\u0177\13\65\3\66"+
		"\3\66\3\66\3\67\6\67\u017d\n\67\r\67\16\67\u017e\38\38\38\38\39\39\39"+
		"\59\u0188\n9\3:\3:\3;\3;\3;\3<\3<\5<\u0191\n<\3<\6<\u0194\n<\r<\16<\u0195"+
		"\3=\3=\5=\u019a\n=\3>\3>\3?\3?\2\2@\4\3\6\4\b\5\n\6\f\7\16\b\20\t\22\n"+
		"\24\13\26\f\30\r\32\16\34\17\36\20 \21\"\22$\23&\24(\25*\26,\27.\30\60"+
		"\31\62\32\64\33\66\348\35:\36<\37> @!B\"D#F$H%J&L\'N(P)R*T+V,X-Z.\\/^"+
		"\60`\61b\62d\63f\64h\65j\66l\67n8p9r\2t\2v\2x\2z\2|\2~\2\4\2\3\16\5\2"+
		"\13\f\17\17\"\"\4\2\13\13\"\"\4\2\f\f\17\17\4\2ZZzz\4\2C\\c|\5\2C\\aa"+
		"c|\4\2}}\177\177\5\2\f\f))^^\t\2))^^ddhhppttvv\4\2GGgg\4\2--//\5\2\62"+
		";CHch\u01af\2\4\3\2\2\2\2\6\3\2\2\2\2\b\3\2\2\2\2\n\3\2\2\2\2\f\3\2\2"+
		"\2\2\16\3\2\2\2\2\20\3\2\2\2\2\22\3\2\2\2\2\24\3\2\2\2\2\26\3\2\2\2\2"+
		"\30\3\2\2\2\2\32\3\2\2\2\2\34\3\2\2\2\2\36\3\2\2\2\2 \3\2\2\2\2\"\3\2"+
		"\2\2\2$\3\2\2\2\2&\3\2\2\2\2(\3\2\2\2\2*\3\2\2\2\2,\3\2\2\2\2.\3\2\2\2"+
		"\2\60\3\2\2\2\2\62\3\2\2\2\2\64\3\2\2\2\2\66\3\2\2\2\28\3\2\2\2\2:\3\2"+
		"\2\2\2<\3\2\2\2\2>\3\2\2\2\2@\3\2\2\2\2B\3\2\2\2\2D\3\2\2\2\2F\3\2\2\2"+
		"\2H\3\2\2\2\2J\3\2\2\2\2L\3\2\2\2\2N\3\2\2\2\2P\3\2\2\2\2R\3\2\2\2\2T"+
		"\3\2\2\2\2V\3\2\2\2\2X\3\2\2\2\2Z\3\2\2\2\2\\\3\2\2\2\2^\3\2\2\2\2`\3"+
		"\2\2\2\2b\3\2\2\2\2d\3\2\2\2\2f\3\2\2\2\2h\3\2\2\2\2j\3\2\2\2\2l\3\2\2"+
		"\2\3n\3\2\2\2\3p\3\2\2\2\4\u0080\3\2\2\2\6\u0082\3\2\2\2\b\u0084\3\2\2"+
		"\2\n\u0086\3\2\2\2\f\u0088\3\2\2\2\16\u008a\3\2\2\2\20\u008c\3\2\2\2\22"+
		"\u008e\3\2\2\2\24\u0090\3\2\2\2\26\u0092\3\2\2\2\30\u0094\3\2\2\2\32\u0097"+
		"\3\2\2\2\34\u0099\3\2\2\2\36\u009c\3\2\2\2 \u009e\3\2\2\2\"\u00a1\3\2"+
		"\2\2$\u00a4\3\2\2\2&\u00a6\3\2\2\2(\u00a9\3\2\2\2*\u00ae\3\2\2\2,\u00b3"+
		"\3\2\2\2.\u00b5\3\2\2\2\60\u00b8\3\2\2\2\62\u00ba\3\2\2\2\64\u00bd\3\2"+
		"\2\2\66\u00c0\3\2\2\28\u00c6\3\2\2\2:\u00ca\3\2\2\2<\u00ce\3\2\2\2>\u00d0"+
		"\3\2\2\2@\u00d3\3\2\2\2B\u00d8\3\2\2\2D\u00da\3\2\2\2F\u00df\3\2\2\2H"+
		"\u00e5\3\2\2\2J\u00e9\3\2\2\2L\u00f0\3\2\2\2N\u00f5\3\2\2\2P\u00fb\3\2"+
		"\2\2R\u00fe\3\2\2\2T\u0100\3\2\2\2V\u0102\3\2\2\2X\u0112\3\2\2\2Z\u0119"+
		"\3\2\2\2\\\u011d\3\2\2\2^\u0126\3\2\2\2`\u0135\3\2\2\2b\u0137\3\2\2\2"+
		"d\u0156\3\2\2\2f\u0161\3\2\2\2h\u0163\3\2\2\2j\u016d\3\2\2\2l\u0178\3"+
		"\2\2\2n\u017c\3\2\2\2p\u0180\3\2\2\2r\u0187\3\2\2\2t\u0189\3\2\2\2v\u018b"+
		"\3\2\2\2x\u018e\3\2\2\2z\u0199\3\2\2\2|\u019b\3\2\2\2~\u019d\3\2\2\2\u0080"+
		"\u0081\7/\2\2\u0081\5\3\2\2\2\u0082\u0083\7-\2\2\u0083\7\3\2\2\2\u0084"+
		"\u0085\7,\2\2\u0085\t\3\2\2\2\u0086\u0087\7\61\2\2\u0087\13\3\2\2\2\u0088"+
		"\u0089\7#\2\2\u0089\r\3\2\2\2\u008a\u008b\7\60\2\2\u008b\17\3\2\2\2\u008c"+
		"\u008d\7+\2\2\u008d\21\3\2\2\2\u008e\u008f\7*\2\2\u008f\23\3\2\2\2\u0090"+
		"\u0091\7.\2\2\u0091\25\3\2\2\2\u0092\u0093\7@\2\2\u0093\27\3\2\2\2\u0094"+
		"\u0095\7@\2\2\u0095\u0096\7?\2\2\u0096\31\3\2\2\2\u0097\u0098\7>\2\2\u0098"+
		"\33\3\2\2\2\u0099\u009a\7>\2\2\u009a\u009b\7?\2\2\u009b\35\3\2\2\2\u009c"+
		"\u009d\7?\2\2\u009d\37\3\2\2\2\u009e\u009f\7?\2\2\u009f\u00a0\7?\2\2\u00a0"+
		"!\3\2\2\2\u00a1\u00a2\7#\2\2\u00a2\u00a3\7?\2\2\u00a3#\3\2\2\2\u00a4\u00a5"+
		"\7=\2\2\u00a5%\3\2\2\2\u00a6\u00a7\7k\2\2\u00a7\u00a8\7h\2\2\u00a8\'\3"+
		"\2\2\2\u00a9\u00aa\7v\2\2\u00aa\u00ab\7j\2\2\u00ab\u00ac\7g\2\2\u00ac"+
		"\u00ad\7p\2\2\u00ad)\3\2\2\2\u00ae\u00af\7g\2\2\u00af\u00b0\7n\2\2\u00b0"+
		"\u00b1\7u\2\2\u00b1\u00b2\7g\2\2\u00b2+\3\2\2\2\u00b3\u00b4\7}\2\2\u00b4"+
		"-\3\2\2\2\u00b5\u00b6\7&\2\2\u00b6\u00b7\7}\2\2\u00b7/\3\2\2\2\u00b8\u00b9"+
		"\7\177\2\2\u00b9\61\3\2\2\2\u00ba\u00bb\7~\2\2\u00bb\u00bc\7~\2\2\u00bc"+
		"\63\3\2\2\2\u00bd\u00be\7(\2\2\u00be\u00bf\7(\2\2\u00bf\65\3\2\2\2\u00c0"+
		"\u00c1\7y\2\2\u00c1\u00c2\7j\2\2\u00c2\u00c3\7k\2\2\u00c3\u00c4\7n\2\2"+
		"\u00c4\u00c5\7g\2\2\u00c5\67\3\2\2\2\u00c6\u00c7\7x\2\2\u00c7\u00c8\7"+
		"c\2\2\u00c8\u00c9\7n\2\2\u00c99\3\2\2\2\u00ca\u00cb\7x\2\2\u00cb\u00cc"+
		"\7c\2\2\u00cc\u00cd\7t\2\2\u00cd;\3\2\2\2\u00ce\u00cf\7<\2\2\u00cf=\3"+
		"\2\2\2\u00d0\u00d1\7/\2\2\u00d1\u00d2\7@\2\2\u00d2?\3\2\2\2\u00d3\u00d4"+
		"\7v\2\2\u00d4\u00d5\7{\2\2\u00d5\u00d6\7r\2\2\u00d6\u00d7\7g\2\2\u00d7"+
		"A\3\2\2\2\u00d8\u00d9\7^\2\2\u00d9C\3\2\2\2\u00da\u00db\7u\2\2\u00db\u00dc"+
		"\7g\2\2\u00dc\u00dd\7n\2\2\u00dd\u00de\7h\2\2\u00deE\3\2\2\2\u00df\u00e0"+
		"\7&\2\2\u00e0\u00e1\7u\2\2\u00e1\u00e2\7g\2\2\u00e2\u00e3\7n\2\2\u00e3"+
		"\u00e4\7h\2\2\u00e4G\3\2\2\2\u00e5\u00e6\7f\2\2\u00e6\u00e7\7g\2\2\u00e7"+
		"\u00e8\7h\2\2\u00e8I\3\2\2\2\u00e9\u00ea\7k\2\2\u00ea\u00eb\7o\2\2\u00eb"+
		"\u00ec\7r\2\2\u00ec\u00ed\7q\2\2\u00ed\u00ee\7t\2\2\u00ee\u00ef\7v\2\2"+
		"\u00efK\3\2\2\2\u00f0\u00f1\7y\2\2\u00f1\u00f2\7k\2\2\u00f2\u00f3\7v\2"+
		"\2\u00f3\u00f4\7j\2\2\u00f4M\3\2\2\2\u00f5\u00f6\7o\2\2\u00f6\u00f7\7"+
		"c\2\2\u00f7\u00f8\7v\2\2\u00f8\u00f9\7e\2\2\u00f9\u00fa\7j\2\2\u00faO"+
		"\3\2\2\2\u00fb\u00fc\7q\2\2\u00fc\u00fd\7h\2\2\u00fdQ\3\2\2\2\u00fe\u00ff"+
		"\7a\2\2\u00ffS\3\2\2\2\u0100\u0101\7~\2\2\u0101U\3\2\2\2\u0102\u0103\7"+
		"n\2\2\u0103\u0104\7n\2\2\u0104\u0105\7x\2\2\u0105\u0106\7o\2\2\u0106\u010a"+
		"\3\2\2\2\u0107\u0109\t\2\2\2\u0108\u0107\3\2\2\2\u0109\u010c\3\2\2\2\u010a"+
		"\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u010d\3\2\2\2\u010c\u010a\3\2"+
		"\2\2\u010d\u010e\7}\2\2\u010e\u010f\3\2\2\2\u010f\u0110\b+\2\2\u0110W"+
		"\3\2\2\2\u0111\u0113\t\3\2\2\u0112\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114"+
		"\u0112\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0117\b,"+
		"\3\2\u0117Y\3\2\2\2\u0118\u011a\7\17\2\2\u0119\u0118\3\2\2\2\u0119\u011a"+
		"\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011c\7\f\2\2\u011c[\3\2\2\2\u011d"+
		"\u0121\7%\2\2\u011e\u0120\n\4\2\2\u011f\u011e\3\2\2\2\u0120\u0123\3\2"+
		"\2\2\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0124\3\2\2\2\u0123"+
		"\u0121\3\2\2\2\u0124\u0125\b.\3\2\u0125]\3\2\2\2\u0126\u0127\5V+\2\u0127"+
		"\u0128\5n\67\2\u0128\u0129\5p8\2\u0129_\3\2\2\2\u012a\u012c\7/\2\2\u012b"+
		"\u012a\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u0136\7\62"+
		"\2\2\u012e\u0132\5|>\2\u012f\u0131\5z=\2\u0130\u012f\3\2\2\2\u0131\u0134"+
		"\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0136\3\2\2\2\u0134"+
		"\u0132\3\2\2\2\u0135\u012b\3\2\2\2\u0135\u012e\3\2\2\2\u0136a\3\2\2\2"+
		"\u0137\u0138\7\62\2\2\u0138\u013a\t\5\2\2\u0139\u013b\5~?\2\u013a\u0139"+
		"\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d"+
		"c\3\2\2\2\u013e\u0140\7/\2\2\u013f\u013e\3\2\2\2\u013f\u0140\3\2\2\2\u0140"+
		"\u0142\3\2\2\2\u0141\u0143\5z=\2\u0142\u0141\3\2\2\2\u0143\u0144\3\2\2"+
		"\2\u0144\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0148"+
		"\7\60\2\2\u0147\u0149\5z=\2\u0148\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a"+
		"\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014d\3\2\2\2\u014c\u014e\5x"+
		"<\2\u014d\u014c\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u0157\3\2\2\2\u014f"+
		"\u0151\5z=\2\u0150\u014f\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0150\3\2\2"+
		"\2\u0152\u0153\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0155\5x<\2\u0155\u0157"+
		"\3\2\2\2\u0156\u013f\3\2\2\2\u0156\u0150\3\2\2\2\u0157e\3\2\2\2\u0158"+
		"\u0159\7v\2\2\u0159\u015a\7t\2\2\u015a\u015b\7w\2\2\u015b\u0162\7g\2\2"+
		"\u015c\u015d\7h\2\2\u015d\u015e\7c\2\2\u015e\u015f\7n\2\2\u015f\u0160"+
		"\7u\2\2\u0160\u0162\7g\2\2\u0161\u0158\3\2\2\2\u0161\u015c\3\2\2\2\u0162"+
		"g\3\2\2\2\u0163\u0167\7)\2\2\u0164\u0166\5r9\2\u0165\u0164\3\2\2\2\u0166"+
		"\u0169\3\2\2\2\u0167\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u016a\3\2"+
		"\2\2\u0169\u0167\3\2\2\2\u016a\u016b\7)\2\2\u016bi\3\2\2\2\u016c\u016e"+
		"\t\6\2\2\u016d\u016c\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u016d\3\2\2\2\u016f"+
		"\u0170\3\2\2\2\u0170\u0175\3\2\2\2\u0171\u0174\t\7\2\2\u0172\u0174\5z"+
		"=\2\u0173\u0171\3\2\2\2\u0173\u0172\3\2\2\2\u0174\u0177\3\2\2\2\u0175"+
		"\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176k\3\2\2\2\u0177\u0175\3\2\2\2"+
		"\u0178\u0179\7&\2\2\u0179\u017a\5j\65\2\u017am\3\2\2\2\u017b\u017d\n\b"+
		"\2\2\u017c\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017c\3\2\2\2\u017e"+
		"\u017f\3\2\2\2\u017fo\3\2\2\2\u0180\u0181\5\60\30\2\u0181\u0182\3\2\2"+
		"\2\u0182\u0183\b8\4\2\u0183q\3\2\2\2\u0184\u0188\5t:\2\u0185\u0188\5v"+
		";\2\u0186\u0188\5Z-\2\u0187\u0184\3\2\2\2\u0187\u0185\3\2\2\2\u0187\u0186"+
		"\3\2\2\2\u0188s\3\2\2\2\u0189\u018a\n\t\2\2\u018au\3\2\2\2\u018b\u018c"+
		"\7^\2\2\u018c\u018d\t\n\2\2\u018dw\3\2\2\2\u018e\u0190\t\13\2\2\u018f"+
		"\u0191\t\f\2\2\u0190\u018f\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0193\3\2"+
		"\2\2\u0192\u0194\5z=\2\u0193\u0192\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0193"+
		"\3\2\2\2\u0195\u0196\3\2\2\2\u0196y\3\2\2\2\u0197\u019a\7\62\2\2\u0198"+
		"\u019a\5|>\2\u0199\u0197\3\2\2\2\u0199\u0198\3\2\2\2\u019a{\3\2\2\2\u019b"+
		"\u019c\4\63;\2\u019c}\3\2\2\2\u019d\u019e\t\r\2\2\u019e\177\3\2\2\2\34"+
		"\2\3\u010a\u0114\u0119\u0121\u012b\u0132\u0135\u013c\u013f\u0144\u014a"+
		"\u014d\u0152\u0156\u0161\u0167\u016f\u0173\u0175\u017e\u0187\u0190\u0195"+
		"\u0199\5\7\3\2\b\2\2\6\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}