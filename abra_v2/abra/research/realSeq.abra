type Seq[T] = (
    each: ((T) -> Boolean) -> None,
    length: Long | None
)

def toSeq[T] = \self: Array[T] ->
    Seq({ fn ->
        var need = true
        var i = 0

        while need && i < self.length {
            need = fn(self(i))
            i = i + 1
        }
    }, self.length)

def toSeq[T] = \self: Range[T] ->
    Seq({ fn -> self.forEach(\e -> fn(e)) }, self.length)

def map[T, U] = \self: Seq[T], mapper: (T) -> U ->
    Seq[U]({ fn -> self.each({ t -> fn(mapper(t)) }) }, self.length)

def take[T] = { self: Seq[T], length: Long ->
    var i = 0
    Seq[T]({ fn ->
        self.each({ t -> i = i + 1; fn(t) && i <= length })
    }, length)
}

def toArray = { self: Seq[T] ->
    val a =
}


def main = {
    val x = Range(0, 100).toSeq.filter(\x -> x mod 2 == 0)
    val y = array.make(100, \i -> i * 19).toSeq.take(10)
    io.fopen?('/tmp/file.txt').lines.forEach?(\line -> io.print(line))
}