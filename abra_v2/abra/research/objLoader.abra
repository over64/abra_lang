import abra.buffers with FloatBuffer
import abra.io with ReaderErr
import abra.int

# 1. если вызываемая функция бросает exception, то ее вызов должен быть с '?'
# 2. rescue - чтобы отловить exception
# 3. raise - чтобы бросить
# 4. бросить можно все, что угодно, будет использована toString
# 5. если делаешь rethrow T, то новый exception должен либо бросать тот же объект, либо новый должен содержать старый как поле
# 6. если -> то функция не может бросить exception, если -?> то гарантировано бросает

type ObjParseErr = (fname: String, lineNum: Int, cause: ReaderErr)
def toString = \self: ObjParseErr -> 'ObjParseErr: Cannot parse obj model from $fname. Error at line $lineNum'

def load = { fname: String -?> # 6
    val file = io.open(fname, 'r')? # 1
    val vertexBuffer = buffers.mkFloat(4)
    val textureBuffer = buffers.mkFloat(4)
    val normalBuffer = buffers.mkFloat(4)
    val meshBuffer = buffers.mkFloat(4)

    file.seq.zipWithIndex.forEach({ line, lineNum -?> # 6
        val reader = line.toReader
        rescue
            if line.startsWith('v ') {
                reader.drop('v '.length)? # 1
                vertexBuffer.push(reader.readFloat?) # x
                vertexBuffer.push(reader.readFloat?) # y
                vertexBuffer.push(reader.readFloat?) # z
            }

            if line.startsWith('vt ') {
                reader.drop('vt '.length)?
                textureBuffer.push(reader.readFloat?) # u
                textureBuffer.push(reader.readFloat?) # v
            }

            if line.startsWith('vn ') {
                reader.drop('vn '.length)?
                normalBuffer.push(reader.readFloat?) # nx
                normalBuffer.push(reader.readFloat?) # ny
                normalBuffer.push(reader.readFloat?) # nz
            }

            if line.startsWith('f ') {
                reader.drop('f '.length)?
                (0 to 3).forEach({ i -?>
                    val vertexId = reader.readInt? - 1
                    meshBuffer.push(vertexBuffer(vertexId * 3)?)     # x
                    meshBuffer.push(vertexBuffer(vertexId * 3 + 1)?) # y
                    meshBuffer.push(vertexBuffer(vertexId * 3 + 2)?) # z
                    reader.drop('/'.length)?

                    val uvId = reader.readInt? - 1
                    meshBuffer.push(textureBuffer(uvId * 2)?)        # u
                    meshBuffer.push(textureBuffer(uvId * 2 + 1)?)    # v
                    reader.drop('/'.length)?

                    val normalId = reader.readInt? - 1
                    meshBuffer.push(normalBuffer(normalId * 3)?)     # nx
                    meshBuffer.push(normalBuffer(normalId * 3 + 1)?) # ny
                    meshBuffer.push(normalBuffer(normalId * 3 + 2)?) # nz
                })
            }
        of e: ReaderErr -> raise ObjParseErr(fname, lineNum, e) # 3, 4, 5
    }

    file.close()
    vertexBuffer.free()
    textureBuffer.free()
    normalBuffer.free()

    meshBuffer
}: FloatBuffer