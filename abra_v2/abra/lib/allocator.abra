import /universe with None, Long, Ptr .

type Allocator = (alloc  : (Long) -> Ptr,
                  inc    : (Ptr) -> None,
                  release: (Ptr, (Ptr) -> None) -> None)


def load = llvm
  %a = alloca %Allocator

  %a.alloc   = getelementptr %Allocator, %Allocator* %a, i64 0, i32 0
  %a.inc     = getelementptr %Allocator, %Allocator* %a, i64 0, i32 1
  %a.release = getelementptr %Allocator, %Allocator* %a, i64 0, i32 2

  %old.alloc   = load i8* (i64)*,  i8* (i64)**   @rcAlloc
  %old.inc     = load void (i8*)*, void (i8*)**  @rcInc
  %old.release = load void (i8*, void (i8*)*)*, void (i8*, void (i8*)*)**    @rcRelease

  store i8* (i64)* %old.alloc, i8* (i64)**  %a.alloc
  store void (i8*)* %old.inc, void (i8*)**  %a.inc
  store void (i8*, void (i8*)*)* %old.release, void (i8*, void (i8*)*)**  %a.release

  %ret = load %Allocator, %Allocator* %a
  ret %Allocator %ret .Allocator

def store = alloc: Allocator do llvm
  %a = load %Allocator, %Allocator* %alloc
  %a.alloc   = extractvalue %Allocator %a, 0
  %a.inc     = extractvalue %Allocator %a, 1
  %a.release = extractvalue %Allocator %a, 2

  store i8* (i64)* %a.alloc, i8* (i64)**  @rcAlloc
  store void (i8*)* %a.inc, void (i8*)**  @rcInc
  store void (i8*, void (i8*)*)* %a.release, void (i8*, void (i8*)*)**  @rcRelease

  ret void .None