def alloc = len: index native
  %ptr = getelementptr %t, %t* null, $index %len
  %size = ptrtoint %t* %ptr to $index
  %alloc = load i8* ($index)*, i8* ($index)** @rcAlloc
  %mem = call i8* %alloc($index %size)
  %array = bitcast i8* %mem to %t*
  ret {$index, $t*} {$index %len, $t* %array} .Array[t]

def len = slf: Array[t] native
  %1 = extractvalue {$index, $t*} %slf, 0
  ret $index %1 .index

def get = slf: Array[t], idx: index native
  %ptr = extractvalue {$index, $t*} %slf, 1
  %elPtr = getelementptr $t, $t* %ptr, $index %idx
  %value = load $t, $t* %elPtr
  ret $t %value .t

def set = slf: Array[t], idx: index, value: t native
  %ptr = extractvalue {$index, $t*} %slf, 1
  %elPtr = getelementptr $t, $t* %ptr, $index %idx
  %old = load $t, $t* %elPtr
  call void @eva::ll::rc_inc($t %value)
  call void @eva::ll::rc_dec($t %old)
  store $t %value, $t* %elPtr
  ret void .None

def setInit = slf: Array[t], idx: index, value: t native
  %ptr = extractvalue {$index, $t*} %slf, 1
  %elPtr = getelementptr $t, $t* %ptr, $index %idx
  %old = load $t, $t* %elPtr
  call void @eva::ll::rc_inc($t %value)
  store $t %value, $t* %elPtr
  ret void .None