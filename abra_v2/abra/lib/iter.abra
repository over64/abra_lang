import
    /universe with None, Bool .

def isIterable = it: iterable do
    iter = it.iterator()  # iterable must provide iterator
    iter.next() .t | None # iterator must provide t | None via next function

type Map[iterable, t, u] = (it: iterable, mapper: (t) -> u)

# lazy type inference?
def map = self: iterable, mapper: (t) -> u do
    if false do value: t | None = isIterable(self) .
    Map(self, mapper) .

def iterator = self: Map[iterable, t, u] do
    MapIter(self.it.iterator(), self.mapper) .

type MapIter[iterator, t, u] = (iter: iterator, mapper: (t) -> u)

def next = self: MapIter[iterator, t, u] do
    when self.iter.next() is value: t do
        self.mapper(value) .
    .u | None