import
    /universe with None
    /array with Array .

def isIterable[Iterable, T] = iterable: Iterable do
    if false do
        iter = iterable.iterator()          # V must have iterator
        when iter.next() is t: T do ...None # iterator must provide T via next function

type Map[Iterable, T, U] = (iterable: Iterable, mapper: (T) -> U)

def map[Iterable, T, U] = self: Iterable, mapper: (T) -> U do
    isIterable[Iterable, T](self)
    Map(self, mapper) .

def iterator[Iterable, T, U] = self: Map[Iterable, T, U] do
    MapIter(self.iterable.iterator(), self.mapper) .

type MapIter[Iterator, T, U] = (iter: Iterator, mapper: (T) -> U)

def next[Iterator, T, U] = self: MapIter[Iterator, T, U] do
    self.mapper(self.iter.next()) .U

