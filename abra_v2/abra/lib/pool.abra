import allocator with Allocator Ptr

native
  @pool = thread_local global %pool.MemPool zeroinitializer
  define void @poolRelease(i8* %obj, void (i8*)* %releaseCallback) {
    ret void
  }

  define void @mpFreeInner(i8* %p) {
    ret void
  }

  define void @mpFreeTC(i8* %self) {
    %sself = bitcast i8* %self to {i8*, i64}*
    %selfAddr = ptrtoint {i8*, i64}* %sself to i64
    %nullCheck = icmp eq i64 %selfAddr, 0
    br i1 %nullCheck, label %endNull, label %begin
  endNull:
    ret void
  begin:
    %1 = getelementptr {i8*, i64}, {i8*, i64}* %sself, i64 0, i32 0
    %2 = load i8*, i8** %1

    %child = ptrtoint i8* %2 to i64
    %isNull = icmp eq i64 %child, 0
    br i1 %isNull, label %end, label %freeChild
  freeChild:
    call void @mpFreeTC(i8* %2)
    br label %end
  end:
    %3 = load void (i8*)*, void (i8*)** @evaFree
    call void %3(i8* %self)
    ret void
  }

  .

type MemPage = native i8* .

def mkMemPage = native
  %1 = load i8* (i64)*, i8* (i64)** @evaAlloc
  %2 = call i8* %1(i64 41943040) ; 1 page
  %mp = bitcast i8* %2 to {i8*, i64}*

  %mp.next = getelementptr {i8*, i64}, {i8*, i64}* %mp, i64 0, i32 0
  store i8* null, i8** %mp.next

  %mp.offset = getelementptr {i8*, i64}, {i8*, i64}* %mp, i64 0, i32 1
  store i64 32, i64* %mp.offset ;  8 + 8 + 8 see data layout for MemPage

  ret i8* %2 .MemPage

def chain = self: MemPage, child: MemPage native
  %sself = bitcast i8* %self to {i8*, i64}*
  %1 = getelementptr {i8*, i64}, {i8*, i64}* %sself, i64 0, i32 0
  store i8* %child, i8** %1
  ret void .None

def mpFreeInner = p: Ptr native
  ret void .None

def mpFree = self: MemPage native
  call void @mpFreeTC(i8* %self)
  ret void .None

def nextPage = self: MemPage native
  %sself = bitcast i8* %self to {i8*, i64}*
  %1 = getelementptr {i8*, i64}, {i8*, i64}* %sself, i64 0, i32 0
  %2 = load i8*, i8** %1
  ret i8* %2 .MemPage

def offset = self: MemPage native
  %sself = bitcast i8* %self to {i8*, i64}*
  %offsetPtr  = getelementptr {i8*, i64}, {i8*, i64}* %sself, i64 0, i32 1
  %offset = load i64, i64* %offsetPtr
  ret i64 %offset .Long

def setOffset = self: MemPage, offset: Long native
  %sself = bitcast i8* %self to {i8*, i64}*
  %offsetPtr  = getelementptr {i8*, i64}, {i8*, i64}* %sself, i64 0, i32 1
  store i64 %offset, i64* %offsetPtr
  ret void .None

def alloc = self: MemPage, newOffset: Long native
  %sself = bitcast i8* %self to {i8*, i64}*
  %offsetPtr  = getelementptr {i8*, i64}, {i8*, i64}* %sself, i64 0, i32 1
  %offset = load i64, i64* %offsetPtr
  store i64 %newOffset, i64* %offsetPtr

  %1 = ptrtoint {i8*, i64}* %sself to i64
  %2 = add nsw i64 %1, %offset
  %objPtr = inttoptr i64 %2 to i8*
  ret i8* %objPtr .Ptr


type MemPool = (parent: Allocator, root: MemPage)
def mk = MemPool(allocator.load(), mkMemPage()) .

def bind = self: MemPool native
  %1 = load %pool.MemPool, %pool.MemPool* %self
  store %pool.MemPool %1, %pool.MemPool* @pool
  ret void .None

def loadPool = native
  %1 = load %pool.MemPool, %pool.MemPool* @pool
  ret %pool.MemPool %1 .MemPool

def loadRoot = native
  %1 = getelementptr %pool.MemPool, %pool.MemPool* @pool, i64 0, i32 1
  %2 = load i8*, i8** %1
  ret i8* %2 .MemPage

def poolAlloc = size: Long do
  -- maybe root = loadPool().root ?
  root = loadRoot()
  rootNewOffset = root.offset() + size

  if rootNewOffset <= 41943040.toLong() do
    root.alloc(rootNewOffset)
  else
    pool = loadPool()
    curr = allocator.load()
    allocator.store(pool.parent)
    newPage = mkMemPage()
    allocator.store(curr)

    pool.root = newPage
    root.chain(newPage)
    pool.bind()
    newOffset = newPage.offset() + size
    newPage.alloc(newOffset) ..Ptr

def poolInc = obj: Ptr native
  ret void .None

def poolDec = obj: Ptr native
  ret i64 1 .Long

def poolFree = obj: Ptr native
    ret void .None

def free = self: MemPool do
  root = self.root
  root.setOffset(32.toLong()) -- FIXME: move down
  next = root.nextPage()
  next.mpFree() .

def withPool = self: MemPool, action: () -> None do
  self.bind()
  allocator.store(Allocator(poolAlloc, poolFree, poolInc, poolDec))
  action()
  allocator.store(self.parent)
  self.free() .

-- MemPage.offset & MemPage.alloc must be inlined?