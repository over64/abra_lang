import
  /universe with None, Bool, Int, String
  /range with Range
  /pool
  /io .

type Node = (left: Node | None, right: Node | None)

def asNode = self: Node | None, callback: (Node) -> None do llvm
  %fn = extractvalue { void (%Node*, i8*)*, i8* } %callback, 0
  %cl = extractvalue { void (%Node*, i8*)*, i8* } %callback, 1
  %1 = load %Node*, %Node** %self
  call void %fn(%Node* %1, i8* %cl)
  ret void .None

# hacky way for manual inline for recursive function
# llvm cannot do this instead of gcc (Сила в GNU, брат)
def mkTree = depth: Int do
  if depth > 0 do
    Node(mkTree(depth - 1), mkTree(depth - 1))
  else
    Node(none, none) ..Node

def checksum = self: Node do
  sum = 1

  when self.left is l: Node do
    # Some hack for performance. Will be much better when macro ready
    # C version just uses nullable value, but Abra does not allows this without FORCE
    self.right asNode lambda r: Node ->
      sum.right = Node(none, none)
      sum = sum + l.checksum() + r.checksum() .

  sum .Int

def stat = nTrees: Int, name: String, depth: Int, sum: Int do
  if nTrees > 1 do io.printInt(nTrees) .
  io.print(name) io.printInt(depth) io.print('\t check: ') io.printInt(sum) io.print('\n') .

def main =
  minDepth = 4
  maxDepth = 21 # sys.arg(0).toInt()

  if maxDepth < minDepth + 2 do
    maxDepth = minDepth + 2 .

  pool.mk() withPool lambda
    tree = mkTree(maxDepth + 1)
    stat(1, 'stretch tree of depth ', maxDepth + 1, tree.checksum()) .

  Range(minDepth, maxDepth, 2) each lambda depth: Int ->
    iters    = 1 shl (maxDepth + minDepth - depth)
    totalSum = 0
    mp = pool.mk()

    Range(1, iters + 1, 1) each lambda i: Int ->
      mp withPool lambda
        totalSum = totalSum + mkTree(depth).checksum() ..

    stat(iters, '\t trees of depth ', depth, totalSum) .

  pool.mk() withPool lambda
    llTree = mkTree(maxDepth)
    stat(1, 'long lived tree of depth ', maxDepth, llTree.checksum()) .

  0 .