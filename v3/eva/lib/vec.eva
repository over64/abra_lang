import arrayUnsafe, array

-- FIXME: use pure native impl, don't use array
-- but I can't now...
type Vec[t] = (array: Array[t], len: Int)

-- FIXME: check index
def get = self: Vec[t], index: Int do
  self.array.get(index) .t

-- FIXME: check index
def set = self: Vec[t], index: Int, value: t do
  arrayUnsafe.setInit(self.array, index, value) .

def push = self: Vec[t], value: t do
  if self.len >= self.array.len() do
    newArray: Array[t] = arrayUnsafe.alloc(self.array.len() * 2)

    i = 0
    while i < self.array.len() do
      arrayUnsafe.setInit(newArray, i, self.array.get(i))
      i = i + 1 .

    self.array = newArray .

  self.array(self.len) = value
  self.len = self.len + 1 .None

def make = capacity: Int do
  Vec(arrayUnsafe.alloc(capacity), 0) .Vec[t]

def asArrayInternal = slf: Array[t], needSize: Int, fn: (Array[t]) -> None native
  %1 = insertvalue $argTypeof(slf) %slf, i32 %needSize, 0
  %2 = extractvalue $argTypeof(fn) %fn, 0
  %3 = extractvalue $argTypeof(fn) %fn, 1
  call void %2($argTypeof(slf) %1, i8* %3)
  ret void .None

def asArray = self: Vec[t], fn: (Array[t]) -> None do
 asArrayInternal(self.array, self.len, fn) .