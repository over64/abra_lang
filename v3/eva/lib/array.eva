import arrayUnsafe

def set = self: Array[t], idx: Int, value: t do
  arrayUnsafe.set(self, idx, value) .None

def map = self: Array, index: Int, mapper(t)->t do
    i = index

    while i < self.len() do
        self(i) = mapper( self(i) )
        i++..

def mapIndexed = self: Array, index: Int, mapper(i, t)->t do
    i = index

    while i < self.len() do
        self(i) = mapper( i, self(i) )
        i++..

def get = self: Array[t], idx: Int do
  arrayUnsafe.get(self, idx) .t

def len = self: Array[t] do
  arrayUnsafe.len(self) .Int

def mk = len: Int, init: (Int) -> t do
  array: Array[t] = arrayUnsafe.alloc(len)
  i = 0
  while i < len do
    arrayUnsafe.setInit(array, i, init(i))
    i = i + 1 .
  array .

type ArrayIter[t] = (array: Array[t], idx: Int)

def iter = self: Array[t] do
  ArrayIter(self, 0) .

def next = self: ArrayIter[t] do
  if self.idx < self.array.len() do
    self.idx = self.idx + 1
    self.array.get(self.idx - 1)
  else none ..t | None