import arrayUnsafe

def set = self: Array[t], idx: Int, value: t do
  arrayUnsafe.set(self, idx, value) .None

def at = self: Array[t], idx: Int, fn: (t) -> None native
  %len = extractvalue $argTypeof(self) %self, 0
  %ptr = extractvalue $argTypeof(self) %self, 1

  %closure = extractvalue $argTypeof(fn) %fn, 0
  %env = extractvalue $argTypeof(fn) %fn, 1
  %elPtr = getelementptr $t, $t* %ptr, i32 %idx

  ;meta if_pass_by_pointer[t] call void %closure($t* %elPtr, i8* %env)
  ;meta if_pass_by_ref[t]     %el = load $t, $t* %elPtr
  ;meta if_pass_by_ref[t]     call void %closure($t %el, i8* %env)

  ret void .None

def forEach = self: Array[t], fn: (t) -> None do
   self.forEachOffset(0, fn) .

def forEachOffset = self: Array[t], start: Int, fn: (t) -> None do
  i = start
  while i < self.len() do
    self.at(i, fn)
    i = i + 1 ..

def forEachIndexed = self: Array[t], fn: (Int, t) -> None do
  i = 0
  while i < self.len() do
    self.at(i, |v: t| fn(i, v)) -- FIXME: bug in type infer!!!
    i = i + 1 ..

def get = self: Array[t], idx: Int do
  arrayUnsafe.get(self, idx) .t

def len = self: Array[t] do
  arrayUnsafe.len(self) .Int

def mk = len: Int, init: (Int) -> t do
  array: Array[t] = arrayUnsafe.alloc(len)
  i = 0
  while i < len do
    arrayUnsafe.setInit(array, i, init(i))
    i = i + 1 .
  array .

type ArrayIter[t] = (array: Array[t], idx: Int)

def iter = self: Array[t] do
  ArrayIter(self, 0) .

def next = self: ArrayIter[t] do
  if self.idx < self.array.len() do
    self.idx = self.idx + 1
    self.array.get(self.idx - 1)
  else none ..t | None