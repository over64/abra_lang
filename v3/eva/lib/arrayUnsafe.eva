def alloc = len: index native
  %allocFn = load i8* (i64)*, i8* (i64)** @evaAlloc
  %ptr = getelementptr $t, $t* null, $index %len
  %size = ptrtoint $t* %ptr to i64
  %mem = call i8* %allocFn(i64 %size)
  %array = bitcast i8* %mem to $t*
  %rv1 = insertvalue $retTypeof() undef, $index %len, 0
  %rv2 = insertvalue $retTypeof() %rv1, $t* %array, 1
  ret $retTypeof() %rv2 .Array[t]

def len = slf: array native
  %1 = extractvalue $array %slf, 0
  ret $index %1 .index

def get = slf: array, idx: index native
  %ptr = extractvalue $array %slf, 1
  %elPtr = getelementptr $t, $t* %ptr, $index %idx
  %value = load $t, $t* %elPtr
  ret $t %value .t

def set = slf: array, idx: index, value: t native
  %ptr = extractvalue $array %slf, 1
  %elPtr = getelementptr $t, $t* %ptr, $index %idx
  %old = load $t, $t* %elPtr
  ;meta rc_inc[t](value)
  ;meta rc_dec[t](old)
  ;meta store_arg(value, elPtr)
  ret void .None

def setInit = slf: array, idx: index, value: t native
  %ptr = extractvalue $array %slf, 1
  %elPtr = getelementptr $t, $t* %ptr, $index %idx
  ;meta rc_inc[t](value)
  ;meta store_arg(value, elPtr)
  ret void .None