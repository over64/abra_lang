import sbufferUnsafe with Ptr

type SBuffer = (data: Ptr, dataLen: Int, len: Int)  -- native {i8*, i32, i32}

def make = len: Int do
  SBuffer(sbufferUnsafe.allocData(len), len, 0) .

def push = self: SBuffer, byte: Byte do
  if self.len >= self.dataLen do
    newLen = self.dataLen * 2
    newData = sbufferUnsafe.allocData(newLen)

    sbufferUnsafe.copyData(newData, self.data, self.dataLen)
    sbufferUnsafe.freeData(self.data)

    self.data    = newData
    self.dataLen = newLen .

  sbufferUnsafe.setByte(self.data, self.len, byte)
  self.len = self.len + 1 .

def asString = self: SBuffer do
  sbufferUnsafe.asString(self.data) .
def free = self: SBuffer do
  sbufferUnsafe.freeData(self.data) .