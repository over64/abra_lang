import range with Range, io

type Node = (left: Node | None, right: Node | None)



def mkTree = depth: Int do  -- FIXME: RC BUG_006
  if depth > 0 do
    Node(mkTree(depth - 1), mkTree(depth - 1))
  else
    Node(none, none) ..Node

-- FIXME: this case - variable alias for unless
--def checksum = self: Node do
--  sum = 1
--
--  self.left unless is l: Node do
--    self.right asNode |r|
--      sum = sum + l.checksum() + r.checksum() .
--
--  sum .Int

def checksum = self: Node do  -- FIXME: RC BUG_007
  self.left unless is l: Node do
    self.right unless is r: Node do
      return 1 + l.checksum() + r.checksum() ..

  1 .Int

def stat = nTrees: Int, name: String, depth: Int, sum: Int do
  if nTrees > 1 do io.printInt(nTrees) .
  io.print(name) io.printInt(depth) io.print('\t check: ') io.printInt(sum) io.print('\n') .

def main =
  minDepth = 4
  maxDepth = 21 -- sys.arg(0).toInt()

  if maxDepth < minDepth + 2 do
    maxDepth = minDepth + 2 .

  tree = mkTree(maxDepth + 1)
  stat(1, 'stretch tree of depth ', maxDepth + 1, tree.checksum())

  llTree = mkTree(maxDepth)

  -- FIXME: move this line to end
  stat(1, 'long lived tree of depth ', maxDepth, llTree.checksum())

  Range(minDepth, maxDepth, 2).forEach with |depth|
    iters    = 1 shl (maxDepth + minDepth - depth)
    totalSum = 0

    Range(1, iters + 1, 1).forEach with |i|
      totalSum = totalSum + mkTree(depth).checksum() .

    stat(iters, '\t trees of depth ', depth, totalSum) .

  0 .