// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package grammar;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class EvaLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int IDENT = 2;
  public static final int STRING = 4;
  public static final int COMMENT = 6;
  public static final int NATIVE_IDENT = 8;
  public static final int NATIVE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\12\u0600\1\u0700"+
    "\2\u0600\1\u0800\10\u0600\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0600"+
    "\1\u0d00\12\u0600\1\u0e00\1\u0f00\170\u0600\1\u1000\1\u1100\3\u0600"+
    "\1\u1200\117\u0600\1\u1300\3\u0600\1\u1400\4\u0600\1\u1500\7\u0600"+
    "\1\u1600\13\u0600\1\u1700\125\u0600\1\u1800\145\u0600\1\u1900\1\u1a00"+
    "\1\u1b00\1\u1c00\21\u0600\1\u1d00\u0f16\u0600";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\4\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\11\20\1\21\1\0"+
    "\1\22\1\23\1\24\2\0\4\25\1\26\1\25\21\27"+
    "\1\30\2\27\1\31\1\0\1\32\3\0\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\41"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\41\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\41"+
    "\1\0\1\62\70\0\1\41\12\0\27\27\1\0\7\27"+
    "\30\41\1\0\10\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\2\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\2\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\2\27\1\41\1\27\1\41\1\27\3\41\2\27"+
    "\1\41\1\27\1\41\2\27\1\41\3\27\2\41\4\27"+
    "\1\41\2\27\1\41\3\27\3\41\2\27\1\41\2\27"+
    "\1\41\1\27\1\41\1\27\1\41\2\27\1\41\1\27"+
    "\2\41\1\27\1\41\2\27\1\41\3\27\1\41\1\27"+
    "\1\41\2\27\2\41\1\0\1\27\3\41\4\0\1\27"+
    "\1\0\1\41\1\27\1\0\1\41\1\27\1\0\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\2\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\2\41\1\27\1\0\1\41\1\27\1\41\3\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\7\41\2\27\1\41\2\27\2\41\1\27"+
    "\1\41\4\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\105\41\1\0\33\41\300\0\1\27\1\41"+
    "\1\27\1\41\2\0\1\27\1\41\3\0\3\41\1\0"+
    "\1\27\6\0\1\27\1\0\3\27\1\0\1\27\1\0"+
    "\2\27\1\41\21\27\1\0\11\27\43\41\1\27\2\41"+
    "\3\27\3\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\5\41\1\27\1\41\1\0\1\27\1\41\2\27"+
    "\2\41\63\27\60\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\10\0\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\2\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\2\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\0\46\27\11\0\51\41\u0217\0\46\27"+
    "\1\0\1\27\5\0\1\27\2\0\53\41\2\0\3\41"+
    "\240\0\126\27\2\0\6\41\202\0\11\41\7\0\53\27"+
    "\2\0\3\27\100\0\54\41\77\0\15\41\1\0\42\41"+
    "\145\0\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\11\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\11\41\10\27\6\41\2\0\6\27\2\0\10\41\10\27"+
    "\10\41\10\27\6\41\2\0\6\27\2\0\10\41\1\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\1\27\10\41"+
    "\10\27\16\41\2\0\10\41\10\0\10\41\10\0\10\41"+
    "\10\0\5\41\1\0\2\41\4\27\2\0\1\41\3\0"+
    "\3\41\1\0\2\41\4\27\4\0\4\41\2\0\2\41"+
    "\4\27\4\0\10\41\5\27\5\0\3\41\1\0\2\41"+
    "\4\27\6\0\1\27\4\0\1\27\2\0\1\41\3\27"+
    "\2\41\3\27\1\41\1\0\1\27\3\0\5\27\6\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\1\0"+
    "\1\41\4\27\1\41\4\0\1\41\2\0\2\41\2\27"+
    "\5\0\1\27\4\41\4\0\1\41\64\0\1\27\1\41"+
    "\173\0\57\27\1\0\57\41\1\0\1\27\1\41\3\27"+
    "\2\41\1\27\1\41\1\27\1\41\1\27\1\41\4\27"+
    "\1\41\1\27\2\41\1\27\6\41\2\0\3\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\2\41\6\0\1\27\1\41\1\27\1\41\3\0"+
    "\1\27\1\41\14\0\46\41\1\0\1\41\5\0\1\41"+
    "\u0112\0\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\22\0"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\1\27\1\41\1\27\1\41"+
    "\1\27\1\41\1\27\1\41\206\0\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\3\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\0\10\41\1\27\1\41\1\27\1\41\2\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\3\0\1\27\1\41\1\27\1\41\1\0\1\27"+
    "\1\41\1\27\3\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\1\27\1\41\5\27"+
    "\1\41\5\27\1\41\1\27\1\41\1\27\1\41\1\27"+
    "\1\41\1\27\1\41\1\27\1\41\2\0\1\27\1\41"+
    "\3\27\63\0\1\41\65\0\53\41\5\0\10\41\10\0"+
    "\120\41\100\0\7\41\14\0\5\41\u0109\0\32\27\6\0"+
    "\32\41\245\0\50\27\50\41\140\0\44\27\4\0\44\41"+
    "\204\0\63\27\15\0\63\41\255\0\40\27\40\41\140\0"+
    "\40\27\40\41\200\0\32\27\32\41\32\27\7\41\1\0"+
    "\22\41\32\27\32\41\1\27\1\0\2\27\2\0\1\27"+
    "\2\0\2\27\2\0\4\27\1\0\10\27\4\41\1\0"+
    "\1\41\1\0\7\41\1\0\13\41\32\27\32\41\2\27"+
    "\1\0\4\27\2\0\10\27\1\0\7\27\1\0\32\41"+
    "\2\27\1\0\4\27\1\0\5\27\1\0\1\27\3\0"+
    "\7\27\1\0\32\41\32\27\32\41\32\27\32\41\32\27"+
    "\32\41\32\27\32\41\32\27\32\41\32\27\34\41\2\0"+
    "\31\27\1\0\31\41\1\0\6\41\31\27\1\0\31\41"+
    "\1\0\6\41\31\27\1\0\31\41\1\0\6\41\31\27"+
    "\1\0\31\41\1\0\6\41\31\27\1\0\31\41\1\0"+
    "\6\41\1\27\1\41\64\0\42\27\42\41\274\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7680];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\14\26"+
    "\1\27\1\30\1\31\1\32\2\33\1\34\2\35\2\36"+
    "\1\37\1\40\1\41\1\16\1\0\1\42\3\0\1\16"+
    "\1\43\1\44\1\45\3\26\1\46\2\26\1\47\1\26"+
    "\1\50\10\26\1\51\2\52\2\16\1\0\2\26\1\53"+
    "\13\26\1\0\1\52\2\26\1\54\2\26\1\55\1\26"+
    "\1\56\1\57\2\26\1\60\1\61\5\26\1\62\1\26"+
    "\1\63\1\64\1\65\1\66\1\26\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0132"+
    "\0\u0132\0\u0165\0\u0198\0\u01cb\0\u0132\0\u0132\0\u0132\0\u0132"+
    "\0\u0132\0\u0132\0\u01fe\0\u0132\0\u0132\0\u0231\0\u0264\0\u0132"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0132\0\u0132\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\u05c7\0\u0132\0\u0132\0\u0132\0\u0132\0\u05fa"+
    "\0\u0132\0\u0132\0\u062d\0\u0132\0\u0660\0\u0132\0\u0132\0\u0132"+
    "\0\u0693\0\u06c6\0\u0132\0\u06f9\0\u0693\0\u072c\0\u075f\0\u0132"+
    "\0\u0132\0\u0132\0\u0792\0\u07c5\0\u07f8\0\u0363\0\u082b\0\u085e"+
    "\0\u0363\0\u0891\0\u0363\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0132\0\u0a5c\0\u0a8f\0\u072c\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0363\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0363\0\u0e58\0\u0e8b\0\u0363\0\u0ebe"+
    "\0\u0363\0\u0363\0\u0ef1\0\u0f24\0\u0363\0\u0363\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u0363\0\u1056\0\u0363\0\u0363\0\u0363"+
    "\0\u0363\0\u1089\0\u0363";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\4\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\37\1\45"+
    "\3\37\1\46\2\37\1\47\1\37\1\50\1\51\1\37"+
    "\1\52\2\37\1\53\1\54\1\55\61\54\6\55\1\56"+
    "\56\55\1\57\1\60\57\55\1\61\1\55\1\62\1\63"+
    "\57\61\2\55\1\64\1\65\57\55\65\0\1\11\103\0"+
    "\1\66\44\0\1\67\71\0\1\70\2\0\1\71\1\72"+
    "\3\0\1\73\53\0\1\74\1\0\2\75\7\0\1\76"+
    "\27\0\1\76\17\0\1\74\1\0\2\77\65\0\1\100"+
    "\62\0\1\101\62\0\1\102\56\0\2\34\4\0\4\34"+
    "\2\0\27\34\20\0\2\37\4\0\4\37\2\0\27\37"+
    "\20\0\2\37\4\0\4\37\2\0\17\37\1\103\7\37"+
    "\20\0\2\37\4\0\4\37\2\0\15\37\1\104\11\37"+
    "\20\0\2\37\4\0\4\37\2\0\4\37\1\105\10\37"+
    "\1\106\11\37\20\0\2\37\4\0\4\37\2\0\12\37"+
    "\1\107\14\37\20\0\2\37\4\0\4\37\2\0\1\110"+
    "\26\37\20\0\2\37\4\0\4\37\2\0\5\37\1\111"+
    "\5\37\1\112\4\37\1\113\6\37\20\0\2\37\4\0"+
    "\4\37\2\0\1\114\14\37\1\115\11\37\20\0\2\37"+
    "\4\0\4\37\2\0\4\37\1\116\22\37\20\0\2\37"+
    "\4\0\4\37\2\0\17\37\1\117\6\37\1\120\20\0"+
    "\2\37\4\0\4\37\2\0\14\37\1\121\12\37\20\0"+
    "\2\37\4\0\4\37\2\0\7\37\1\122\1\123\16\37"+
    "\63\0\1\124\2\0\1\57\62\0\1\62\62\0\1\64"+
    "\75\0\1\74\1\0\2\75\57\0\1\74\1\0\2\125"+
    "\61\0\2\126\61\0\2\127\4\0\2\127\4\0\6\127"+
    "\37\0\1\74\1\0\2\130\5\0\1\131\10\0\1\131"+
    "\42\0\2\37\4\0\4\37\2\0\4\37\1\132\22\37"+
    "\20\0\2\37\4\0\4\37\2\0\14\37\1\133\12\37"+
    "\20\0\2\37\4\0\4\37\2\0\5\37\1\134\21\37"+
    "\20\0\2\37\4\0\4\37\2\0\20\37\1\135\6\37"+
    "\20\0\2\37\4\0\4\37\2\0\12\37\1\136\14\37"+
    "\20\0\2\37\4\0\4\37\2\0\16\37\1\137\10\37"+
    "\20\0\2\37\4\0\4\37\2\0\21\37\1\140\5\37"+
    "\20\0\2\37\4\0\4\37\2\0\14\37\1\141\12\37"+
    "\20\0\2\37\4\0\4\37\2\0\21\37\1\142\5\37"+
    "\20\0\2\37\4\0\4\37\2\0\22\37\1\143\4\37"+
    "\20\0\2\37\4\0\4\37\2\0\16\37\1\144\10\37"+
    "\20\0\2\37\4\0\4\37\2\0\12\37\1\145\14\37"+
    "\20\0\2\37\4\0\4\37\2\0\10\37\1\146\16\37"+
    "\20\0\2\37\4\0\4\37\2\0\21\37\1\147\5\37"+
    "\16\0\1\74\1\0\2\75\5\0\1\131\10\0\1\131"+
    "\42\0\2\126\5\0\1\131\10\0\1\131\40\0\1\74"+
    "\1\0\2\130\54\0\1\150\1\0\1\150\2\0\2\151"+
    "\61\0\2\37\4\0\4\37\2\0\1\152\26\37\20\0"+
    "\2\37\4\0\4\37\2\0\21\37\1\153\5\37\20\0"+
    "\2\37\4\0\4\37\2\0\4\37\1\154\22\37\20\0"+
    "\2\37\4\0\4\37\2\0\20\37\1\143\6\37\20\0"+
    "\2\37\4\0\4\37\2\0\15\37\1\155\11\37\20\0"+
    "\2\37\4\0\4\37\2\0\10\37\1\156\16\37\20\0"+
    "\2\37\4\0\4\37\2\0\4\37\1\157\22\37\20\0"+
    "\2\37\4\0\4\37\2\0\22\37\1\160\4\37\20\0"+
    "\2\37\4\0\4\37\2\0\4\37\1\161\22\37\20\0"+
    "\2\37\4\0\4\37\2\0\4\37\1\162\22\37\20\0"+
    "\2\37\4\0\4\37\2\0\4\37\1\163\22\37\20\0"+
    "\2\37\4\0\4\37\2\0\12\37\1\164\14\37\20\0"+
    "\2\37\4\0\4\37\2\0\7\37\1\165\17\37\20\0"+
    "\2\151\61\0\2\37\4\0\4\37\2\0\11\37\1\166"+
    "\15\37\20\0\2\37\4\0\4\37\2\0\10\37\1\167"+
    "\16\37\20\0\2\37\4\0\4\37\2\0\17\37\1\170"+
    "\7\37\20\0\2\37\4\0\4\37\2\0\23\37\1\171"+
    "\3\37\20\0\2\37\4\0\4\37\2\0\17\37\1\172"+
    "\7\37\20\0\2\37\4\0\4\37\2\0\20\37\1\173"+
    "\6\37\20\0\2\37\4\0\4\37\2\0\4\37\1\174"+
    "\22\37\20\0\2\37\4\0\4\37\2\0\14\37\1\175"+
    "\12\37\20\0\2\37\4\0\4\37\2\0\21\37\1\176"+
    "\5\37\20\0\2\37\4\0\4\37\2\0\4\37\1\177"+
    "\22\37\20\0\2\37\4\0\4\37\2\0\14\37\1\200"+
    "\12\37\20\0\2\37\4\0\4\37\2\0\20\37\1\201"+
    "\6\37\20\0\2\37\4\0\4\37\2\0\22\37\1\202"+
    "\4\37\20\0\2\37\4\0\4\37\2\0\4\37\1\203"+
    "\22\37\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4284];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\3\11\3\1\6\11\1\1\2\11\2\1\1\11"+
    "\4\1\2\11\15\1\4\11\1\1\2\11\1\1\1\11"+
    "\1\1\3\11\1\1\1\0\1\11\3\0\1\1\3\11"+
    "\21\1\1\11\4\1\1\0\16\1\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private long lastIdent        = 0;
  private long identBegin       = 0;
  private long commentBegin     = 0;
  private long strBegin         = 0;
  private long nativeBegin      = 0;
  private long nativeIdentBegin = 0;

  public enum Lex {
    IDENT, COMMENT,
    DOT, COMMA, CON, V_LINE, EQ, R_ARROW,
    L_PAREN, R_PAREN, L_BRACKET, R_BRACKET,
    LOGIC_NOT, LOGIC_OR, LOGIC_AND,
    CMP_MORE, CMP_LESS, CMP_MORE_EQ, CMP_LESS_EQ, CMP_EQEQ, CMP_NOTEQ,
    BIN_MINUS, BIN_PLUS, BIN_MUL, BIN_DIV,
    IMPORT, TYPE, DEF, WITH,
    IF, DO, ELSE, IS, UNLESS,
    WHILE, BREAK, CONTINUE, RETURN,
    ID, TYPE_ID,
    LIT_NONE, LIT_BOOL, LIT_INT, LIT_FLOAT, LIT_STRING,
    NATIVE
  }

  public static class LexicalException extends Exception {
    public LexicalException(String message) {
      super(message);
    }
  }

  // FIXME: IllegalCharException?

  public static class UnterminatedStringException extends LexicalException {
    public final long at;
    public UnterminatedStringException(long at) {
      super("Unterminated string literal at " + at);
      this.at = at;
    }
  }

  public static class Emitter {
      public static final long EOF = 0xFF;
      public static long encode(Lex token, long start, long len) {
        return (start << 32) | (len << 8) | token.ordinal();
      }

      public static Lex decodeLex(long encoded) {
        return Lex.values()[(int) (encoded & 0xFFL)];
      }

      public static int decodeStart(long encoded) {
        return (int) ((encoded & 0xFFFFFFFF00000000L) >> 32);
      }
      public static int decodeLen(long encoded) {
        return (int) ((encoded & 0x00000000FFFFFF00L) >> 8);
      }
  }

  private long emit(Lex token) {
      return Emitter.encode(token, this.yychar, this.zzMarkedPos - this.zzStartRead);
  }

  private long emitIdent() {
    lastIdent = this.yychar - identBegin;
    return Emitter.encode(Lex.IDENT, identBegin, this.yychar - identBegin);
  }

  private long emitString() {
    return Emitter.encode(Lex.LIT_STRING, strBegin, this.yychar - strBegin);
  }

  private long emitComment() {
      return Emitter.encode(Lex.COMMENT, commentBegin, this.yychar - commentBegin);
  }

  private long emitNative() {
//      System.out.println("emit native nb=" + nativeBegin + " len= " + (this.yychar - nativeBegin - 1));
    return Emitter.encode(Lex.NATIVE, nativeBegin, nativeIdentBegin - nativeBegin - 1);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EvaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) throws LexicalException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new LexicalException(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  throws LexicalException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public long yylex() throws java.io.IOException, LexicalException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              throw new UnterminatedStringException(yychar);
            }  // fall though
            case 132: break;
            case NATIVE: {
              yybegin(YYINITIAL); return Emitter.encode(Lex.NATIVE, nativeBegin, this.yychar - nativeBegin);
            }  // fall though
            case 133: break;
            default:
              {
                return Emitter.EOF;
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new LexicalException("Illegal character <" + yytext() + "> at " + yychar);
            }
            // fall through
          case 56: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 57: break;
          case 3:
            { identBegin   = yychar + 1; yybegin(IDENT);
            }
            // fall through
          case 58: break;
          case 4:
            { return emit(Lex.LOGIC_NOT);
            }
            // fall through
          case 59: break;
          case 5:
            { strBegin     = yychar + 1; yybegin(STRING);
            }
            // fall through
          case 60: break;
          case 6:
            { return emit(Lex.L_PAREN);
            }
            // fall through
          case 61: break;
          case 7:
            { return emit(Lex.R_PAREN);
            }
            // fall through
          case 62: break;
          case 8:
            { return emit(Lex.BIN_MUL);
            }
            // fall through
          case 63: break;
          case 9:
            { return emit(Lex.BIN_PLUS);
            }
            // fall through
          case 64: break;
          case 10:
            { return emit(Lex.COMMA);
            }
            // fall through
          case 65: break;
          case 11:
            { return emit(Lex.BIN_MINUS);
            }
            // fall through
          case 66: break;
          case 12:
            { return emit(Lex.DOT);
            }
            // fall through
          case 67: break;
          case 13:
            { return emit(Lex.BIN_DIV);
            }
            // fall through
          case 68: break;
          case 14:
            { return emit(Lex.LIT_INT);
            }
            // fall through
          case 69: break;
          case 15:
            { return emit(Lex.CON);
            }
            // fall through
          case 70: break;
          case 16:
            { return emit(Lex.CMP_LESS);
            }
            // fall through
          case 71: break;
          case 17:
            { return emit(Lex.EQ);
            }
            // fall through
          case 72: break;
          case 18:
            { return emit(Lex.CMP_MORE);
            }
            // fall through
          case 73: break;
          case 19:
            { return emit(Lex.TYPE_ID);
            }
            // fall through
          case 74: break;
          case 20:
            { return emit(Lex.L_BRACKET);
            }
            // fall through
          case 75: break;
          case 21:
            { return emit(Lex.R_BRACKET);
            }
            // fall through
          case 76: break;
          case 22:
            { return emit(Lex.ID);
            }
            // fall through
          case 77: break;
          case 23:
            { return emit(Lex.V_LINE);
            }
            // fall through
          case 78: break;
          case 24:
            { yybegin(YYINITIAL); yypushback(1); return emitIdent();
            }
            // fall through
          case 79: break;
          case 25:
            { /* consume */
            }
            // fall through
          case 80: break;
          case 26:
            { yybegin(YYINITIAL); return emitString();
            }
            // fall through
          case 81: break;
          case 27:
            { identBegin = yychar + 1; yybegin(IDENT); return emitComment();
            }
            // fall through
          case 82: break;
          case 28:
            { long newIdentSize = yychar - nativeIdentBegin;
//    System.out.println("new ident size =" + newIdentSize);
    if(newIdentSize <= lastIdent) {
        identBegin = nativeIdentBegin;
        yypushback(1);
        yybegin(IDENT);
        return emitNative();
    } else yybegin(NATIVE);
            }
            // fall through
          case 83: break;
          case 29:
            { nativeIdentBegin = yychar + 1;
            }
            // fall through
          case 84: break;
          case 30:
            { nativeIdentBegin = yychar + 1; yybegin(NATIVE_IDENT);
            }
            // fall through
          case 85: break;
          case 31:
            { return emit(Lex.CMP_NOTEQ);
            }
            // fall through
          case 86: break;
          case 32:
            { return emit(Lex.LOGIC_AND);
            }
            // fall through
          case 87: break;
          case 33:
            { commentBegin = yychar + 2; yybegin(COMMENT);
            }
            // fall through
          case 88: break;
          case 34:
            { return emit(Lex.R_ARROW);
            }
            // fall through
          case 89: break;
          case 35:
            { return emit(Lex.CMP_LESS_EQ);
            }
            // fall through
          case 90: break;
          case 36:
            { return emit(Lex.CMP_EQEQ);
            }
            // fall through
          case 91: break;
          case 37:
            { return emit(Lex.CMP_MORE_EQ);
            }
            // fall through
          case 92: break;
          case 38:
            { return emit(Lex.DO);
            }
            // fall through
          case 93: break;
          case 39:
            { return emit(Lex.IF);
            }
            // fall through
          case 94: break;
          case 40:
            { return emit(Lex.IS);
            }
            // fall through
          case 95: break;
          case 41:
            { return emit(Lex.LOGIC_OR);
            }
            // fall through
          case 96: break;
          case 42:
            { return emit(Lex.LIT_FLOAT);
            }
            // fall through
          case 97: break;
          case 43:
            { return emit(Lex.DEF);
            }
            // fall through
          case 98: break;
          case 44:
            { return emit(Lex.ELSE);
            }
            // fall through
          case 99: break;
          case 45:
            { return emit(Lex.LIT_NONE);
            }
            // fall through
          case 100: break;
          case 46:
            { return emit(Lex.LIT_BOOL);
            }
            // fall through
          case 101: break;
          case 47:
            { return emit(Lex.TYPE);
            }
            // fall through
          case 102: break;
          case 48:
            { return emit(Lex.WITH);
            }
            // fall through
          case 103: break;
          case 49:
            { return emit(Lex.BREAK);
            }
            // fall through
          case 104: break;
          case 50:
            { return emit(Lex.WHILE);
            }
            // fall through
          case 105: break;
          case 51:
            { return emit(Lex.IMPORT);
            }
            // fall through
          case 106: break;
          case 52:
            { nativeBegin  = yychar + 6; yybegin(NATIVE);
            }
            // fall through
          case 107: break;
          case 53:
            { return emit(Lex.RETURN);
            }
            // fall through
          case 108: break;
          case 54:
            { return emit(Lex.UNLESS);
            }
            // fall through
          case 109: break;
          case 55:
            { return emit(Lex.CONTINUE);
            }
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
