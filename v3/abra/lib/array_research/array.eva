import /universe
       unsafeArray .
# Пока не нужны array literals
# index = Int
# реализовать специализатор $t
# реализовать intrinsics для rc

def set = self: Array[t], idx: Int, value: t do
   unsafeArray.set(self, idx, value)

def get = self: Array[t], idx: Int do
  unsafeArray.get(self, idx)

def len = self: Array[t] do
  unsafeArray.len(self)

def mk = len: Int, init: (Int) -> t do
  array: Array[t] = unsafeArray.alloc(len)

  i = 0
  while i < len do
    unsafeArray.setInit(array, i, init(i))
    i = i + 1 .

  array .

type ArrayIter[t] = (array: Array[t], idx: Int)

def iterator = self: Array[t] do
  ArrayIter(self, 0) .

def next = self: ArrayIter[t] do
  curr = self.idx
  if curr < self.array.len() do
    value = self.array.get(curr)
    self.idx = curr.next()
    value
  else none ..