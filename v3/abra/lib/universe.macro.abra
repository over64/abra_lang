import /meta .

@meta.lowtype(llvm = (data = 'void'))
type None = ()

@meta.lowtype(llvm = (data = 'i8'))
type Bool = ()

@meta.lowtype(llvm = (data = 'i32'))
type Int  = ()

@meta.lowtype(llvm = (data = 'i64'))
type Long = ()

@meta.lowtype(llvm = (data ='i8*', ref = true))
type String = ()

@meta.inline()
@meta.lowdef(llvm =
  (code = '
    %1 = add nsw i32 %self, %other
    ret i32 %1'))
def + = self: Int, other: Int do .Int

@meta.inline()
@meta.lowdef(llvm =
  (code = '
    %1 = sub nsw i32 %self, %other
    ret i32 %1'))
def - = self: Int, other: Int do .Int

@meta.inline()
@meta.lowdef(llvm =
  (code = '
    %1 = icmp sgt i32 %self, %other
    %2 = zext i1 %1 to i8
    ret i8 %2'))
def > = self: Int, other: Int do .Bool

@meta.inline()
@meta.lowdef(llvm =
  (code = '
    %1 = icmp slt i32 %self, %other
    %2 = zext i1 %1 to i8
    ret i8 %2 .Bool'))
def < = self: Int, other: Int do .Bool

@meta.inline()
@meta.lowdef(llvm =
  (code = '
    %1 = shl nsw i32 %self, %other
    ret i32 %1'))
def shl = self: Int, shift: Int do .Int

@meta.inline()
@meta.lowdef(llvm =
  (code = '
    %1 = zext i32 %self to i64
    ret i64 %1'))
def toLong = self: Int do .Long

@meta.inline()
@meta.lowdef(llvm =
  (code = '
    %1 = add nsw i64 %self, %other
    ret i64 %1'))
def + = self: Long, other: Long do .Long

@meta.inline()
@meta.lowdef(llvm =
  (code = '
    %1 = icmp sge i64 %self, %other
    %2 = zext i1 %1 to i8
    ret i8 %2'))
def >= = self: Long, other: Long do .Bool

@meta.inline()
@meta.lowdef(llvm =
  (code = '
    %1 = icmp sle i64 %self, %other
    %2 = zext i1 %1 to i8
    ret i8 %2'))
def <= = self: Long, other: Long do .Long
