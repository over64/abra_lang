native
  declare i32 @SDL_Init(i32)
  declare void @SDL_Quit()
  ; SDL_Window * SDLCALL SDL_CreateWindow(const char *title, int x, int y, int w, int h, Uint32 flags)
  declare i8* @SDL_CreateWindow(i8*, i32, i32, i32, i32, i32)

  ;void SDL_DestroyWindow(SDL_Window* window)
  declare void @SDL_DestroyWindow(i8*)

  ; int SDLCALL SDL_PollEvent(SDL_Event * event)
  declare i32 @SDL_PollEvent(i8*)

  ; extern DECLSPEC SDL_GLContext SDLCALL SDL_GL_CreateContext(SDL_Window * window)
  declare i8* @SDL_GL_CreateContext(i8*)

  ; SDL_GL_DeleteContext(SDL_GLContext context)
  declare void @SDL_GL_DeleteContext(i8*)

  ; extern DECLSPEC void SDLCALL SDL_GL_SwapWindow(SDL_Window * window)
  declare void @SDL_GL_SwapWindow(i8*) .

def initTimer          = 0x00000001 .
def initAudio          = 0x00000010 .
def initVideo          = 0x00000020 . -- SDL_initVIDEO implies SDL_initEVENTS
def initJoystick       = 0x00000200 . -- SDL_initJOYSTICK implies SDL_initEVENTS
def initHaptic         = 0x00001000 .
def initGameController = 0x00002000 . -- SDL_initGAMECONTROLLER implies SDL_initJOYSTICK
def initEvents         = 0x00004000 .
def initNoParachute    = 0x00100000 . -- compatibility; this flag is ignored
def initEverything =
  initTimer()    or
  initAudio()    or
  initVideo()    or
  initEvents()   or
  initJoystick() or
  initHaptic()   or
  initGameController() .

def init = mode: Int, onErr: (String) -> None do
  if initInternal(mode) < 0 do
     onErr('sdl init error!') ..None

def initInternal = mode: Int native
    %1 = call i32 @SDL_Init(i32 %mode)
    ret i32 %1 .Int

def quit = native
    call void @SDL_Quit()
    ret void .None

type Window = native i8* .
type GLContext = native i8* .

def windowFullscreen         = 0x00000001 . -- fullscreen window
def windowOpenGL             = 0x00000002 . -- window usable with OpenGL context
def windowShown              = 0x00000004 . -- window is visible
def windowHidden             = 0x00000008 . -- window is not visible
def windowBorderless         = 0x00000010 . -- no window decoration
def windowResizable          = 0x00000020 . -- window can be resized
def windowMinimized          = 0x00000040 . -- window is minimized
def windowMaximized          = 0x00000080 . -- window is maximized
def windowInputGrabbed       = 0x00000100 . -- window has grabbed input focus
def windowInputFocus         = 0x00000200 . -- window has input focus
def windowMouseFocus         = 0x00000400 . -- window has mouse focus
def windowFullscreenDesktop  = windowFullscreen() or 0x00001000 .
def windowForeign            = 0x00000800 . -- window not created by SDL
def windowAllowHighDPI       = 0x00002000 . -- window should be created in high-DPI mode if supported
def windowMouseCapture       = 0x00004000 . -- window has mouse captured (unrelated to INPUT_GRABBED)

def createWindow = title: String, x: Int, y: Int, w: Int, h: Int, flags: Int native
    %1 = call i8* @SDL_CreateWindow(i8* %title, i32 %x, i32 %y, i32 %w, i32 %h, i32 %flags)
    ret i8* %1 .Window

def destroy = self: Window native
    call void @SDL_DestroyWindow(i8* %self)
    ret void .None

def noEvent      = 0x000 .
def eventQuit    = 0x100 .
def eventKeydown = 0x300 .

type EventData = native [56 x i8] .
type Event = (eventType: Int, data: EventData)

def pollEvents = onEvent: (Event) -> None do
  while true do
    event = pollEvent()
    if event.eventType == noEvent() do return -- FIXME: use break
    else
      onEvent(event) ...None

def pollEvent = native
    %ev = alloca %sdl.Event
    %1 = getelementptr %sdl.Event, %sdl.Event* %ev, i32 0, i32 0
    store i32 0, i32* %1
    %2 = bitcast %sdl.Event* %ev to i8*
    %3 = call i32 @SDL_PollEvent(i8* %2)
    %4 = load %sdl.Event, %sdl.Event* %ev
    ret %sdl.Event %4 .Event

def glCreateContext = self: Window native
    %1 = call i8* @SDL_GL_CreateContext(i8* %self)
    ret i8* %1 .GLContext

def delete = self: GLContext native
   call void @SDL_GL_DeleteContext(i8* %self)
   ret void .None

def glSwap = self: Window native
    call void @SDL_GL_SwapWindow(i8* %self)
    ret void .None