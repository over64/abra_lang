import abra.io
import abra.fnTools

def add = \x: Int, y: Int -> x + y .
def sub = \x: Int, y: Int -> x - 1 .
def onUnknownOp = \op: String -> Nil .

def dispatcher =
    fnTools.dispatch(onUnknownOp, ('add', add), ('sub', sub)) .

def main =
  while true do
    val op = io.readLn
    match
      do dispatcher with op, \handler ->
        val vec: (x: Int, y: Int) = (io.readInt, io.readInt)
        handler(vec.x, vec.y) .
    case i: Int do io.printf('%s = %d\n', op, i)
    else io.printf('unknown op %s\n', op) ...