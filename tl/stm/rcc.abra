def +: (self: Int, other: Int) -> Int = llvm {
    %1 = add nsw i32 %self, %other
    ret i32 %1
}

def shl: (self: Int, shift: Int) -> Int = llvm {
    %1 = shl i32 %self, %shift
    ret i32 %1
}

def regBit = \base: Int, bit: Int -> (base shl 5) + bit
def IOC = regBit(0x18, 4)

def periphClockEnable: (ioNum: Int) -> Unit = llvm {
    call void @rcc_periph_clock_enable(i32 %ioNum)
    ret void
}