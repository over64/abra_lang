def print: (self: String) -> Unit = llvm  {
  %1 = call i32 @puts(i8* %self)
  ret void
}

type Fd = llvm { i8* }

def open: (fname: String, mode: String) -> Fd = llvm {
    %1 = call i8* @fopen(i8* %fname, i8* %mode)
    ret i8* %1
}

def close: (self: Fd) -> Unit = llvm {
    %1 = call i32 @fclose(i8* %self)
    ret void
}

def isNullLine: (self: String) -> Boolean = llvm {
    %1 = icmp eq i8* %self, null
    ret i1 %1
}

# FIXME: sizes
def readLine: (self: Fd) -> String = llvm {
; declare i64 @getline(i8** lineptr, i64* n, fd: i32)
    %1 = alloca i8*
    store i8* null, i8** %1
    %2 = alloca i64
    store i64 0, i64* %2
    %3 = call i64 @getline(i8** %1, i64* %2, i8* %self)
    %4 = icmp eq i64 %3, -1
    br i1 %4, label %labelTrue, label %labelEnd
labelTrue:
    store i8* null, i8** %1
    br label %labelEnd
labelEnd:
    %5 = load i8*, i8** %1
    ret i8* %5
}

def print: (self: Float) -> Unit = llvm {
    %format = bitcast [3 x i8]* @.printfFloat to i8*
    %d = fpext float %self to double
    call i32 (i8*, ...) @printf(i8* %format, double %d)
    ret void
}

def print: (self: Int) -> Unit = llvm {
    %format = bitcast [3 x i8]* @.printfInt to i8*
    call i32 (i8*, ...) @printf(i8* %format, i32 %self)
    ret void
}

def length: (self: String) -> Int = llvm {
    %len = call i64 @strlen(i8* %self)
    %tlen = trunc i64 %len to i32
    ret i32 %tlen
}

def startsWith: (self: String, prefix: String) -> Boolean = llvm {
    %prefixLen = call i64 @strlen(i8* %prefix)
    %compared = call i32 @strncmp(i8* %self, i8* %prefix, i64 %prefixLen)
    %isEqual = icmp eq i32 %compared, 0
    ret i1 %isEqual
}

type StringReader = (str: String, pos: Int)

def toReader = \self: String -> StringReader(self, 0)

def drop: (self: StringReader, n: Int) -> Unit = llvm {
    %posPtr = getelementptr %struct.abra.io.StringReader, %struct.abra.io.StringReader* %self, i32 0, i32 1
    %oldPos = load i32, i32* %posPtr
    %newPos = add nsw i32 %oldPos, %n
    store i32 %newPos, i32* %posPtr
    ret void
}

def readFloat: (self: StringReader) -> Float = llvm {
	%format = bitcast [5 x i8]* @.sscanfFloat to i8*
	%posPtr = getelementptr %struct.abra.io.StringReader, %struct.abra.io.StringReader* %self, i32 0, i32 1
    %oldPos = load i32, i32* %posPtr
    %strPtr = getelementptr %struct.abra.io.StringReader, %struct.abra.io.StringReader* %self, i32 0, i32 0
    %str = load i8*, i8** %strPtr
    %strWithOffset = getelementptr i8, i8* %str, i32 %oldPos
    %readFloatPtr = alloca float
    %readBytesPtr = alloca i32
    call i32 (i8*, i8*, ...) @sscanf(i8* %strWithOffset, i8* %format, float* %readFloatPtr, i32* %readBytesPtr)
    %readBytes = load i32, i32* %readBytesPtr
    %newPos = add nsw i32 %oldPos, %readBytes
    store i32 %newPos, i32* %posPtr
    %readFloat = load float, float* %readFloatPtr
    ret float %readFloat
}

def readInt: (self: StringReader) -> Int = llvm {
	%format = bitcast [5 x i8]* @.sscanfInt to i8*
	%posPtr = getelementptr %struct.abra.io.StringReader, %struct.abra.io.StringReader* %self, i32 0, i32 1
    %oldPos = load i32, i32* %posPtr
    %strPtr = getelementptr %struct.abra.io.StringReader, %struct.abra.io.StringReader* %self, i32 0, i32 0
    %str = load i8*, i8** %strPtr
    %strWithOffset = getelementptr i8, i8* %str, i32 %oldPos
    %readIntPtr = alloca i32
    %readBytesPtr = alloca i32
    call i32 (i8*, i8*, ...) @sscanf(i8* %strWithOffset, i8* %format, i32* %readIntPtr, i32* %readBytesPtr)
    %readBytes = load i32, i32* %readBytesPtr
    %newPos = add nsw i32 %oldPos, %readBytes
    store i32 %newPos, i32* %posPtr
    %readInt = load i32, i32* %readIntPtr
    ret i32 %readInt
}
type Stdin = (void: Int)
def stdin = Stdin(0)

type None = llvm { i8 }
type IntOption = Int | None

def readInt: (self: Stdin) -> IntOption = llvm {
    %tagPtr = getelementptr %union.abra.io.IntOption, %union.abra.io.IntOption* %ret, i32 0, i32 0
    %intPtr = getelementptr %union.abra.io.IntOption, %union.abra.io.IntOption* %ret, i32 0, i32 1
	%format = bitcast [3 x i8]* @.scanfInt to i8*
	%result = call i32 (i8*, ...) @scanf(i8* %format, i32* %intPtr)
	%1 = icmp eq i32 %result, 1
	br i1 %1, label %readOk, label %readFail
readOk:
    store i32 0, i32* %tagPtr
    br label %readDone
readFail:
    store i32 1, i32* %tagPtr
    br label %readDone
readDone:
    ret void
}
