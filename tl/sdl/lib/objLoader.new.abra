import buff = abra.buffers with FloatBuffer, OutOfRange
import io = abra.io with IOError, ReaderError

error ObjLoadError = IOError | ReaderError | OutOfRange

def readVertex = { buffer: FloatBuffer, line: String ->
    val reader = line.toReader
    unless ReaderError {
        reader.drop('v '.length)
        buffer.push(reader.readFloat) # x
        buffer.push(reader.readFloat) # y
        buffer.push(reader.readFloat) # z
    }
}: Unit unless ReaderError

def readTexture = { buffer: FloatBuffer, line: String ->
    val reader = line.toReader
    unless ReaderError {
        reader.drop('vt '.length)
        buffer.push(reader.readFloat) # u
        buffer.push(reader.readFloat) # v
    }
}: Unit unless ReaderError

def readNormal = { buffer: FloatBuffer, line: String ->
    val reader = line.toReader
    unless ReaderError {
        reader.drop('vn '.length)
        buffer.push(reader.readFloat) # nx
        buffer.push(reader.readFloat) # ny
        buffer.push(reader.readFloat) # nz
    }
}: Unit unless ReaderError

def readFace = { buffer: FloatBuffer, line: String, vert: FloatBuffer, tex: FloatBuffer, nl: FloatBuffer ->
    val reader = line.toReader
    reader.drop('f '.length) unless ReaderError

    (0 to 3).takeWhile[ObjLoadError]({ i ->
        val vertexId = reader.readInt unless ReaderError - 1
        reader.drop('/'.length) unless ReaderError
        val uvId = reader.readInt unless ReaderError - 1
        reader.drop('/'.length) unless ReaderError
        val normalId = reader.readInt unless ReaderError - 1

        val mesh = unless OutOfRange {
            [vert(vertexId * 3), vert(vertexId * 3 + 1), vert(vertexId * 3 + 2),
            tex(uvId * 2), tex(uvId * 2 + 1),
            nl(normalId * 3), nl(normalId * 3 + 1), nl(normalId * 3 + 2)]
        }

        buffer.append(mesh)
    }) unless ObjLoadError
}: Unit unless ObjLoadError

def load = { fname: String ->
    val objFile = io.open(fname, 'r') unless IOError

    val vertexBuffer = buff.mkFloat(4)
    val textureBuffer = buff.mkFloat(4)
    val normalBuffer = buff.mkFloat(4)
    val meshBuffer = buff.mkFloat(4)

    objFile.lines.eachUnless[ObjLoadError]({ ioLine ->
        val line = ioLine unless IOError

        if line.startsWith('v ') then readVertex(vertexBuffer, line) unless ObjLoadError
        if line.startsWith('vt ') then readTexture(textureBuffer, line) unless ObjLoadError
        if line.startsWith('vn ') then readNormal(normalBuffer, line) unless ObjLoadError
        if line.startsWith('f ')
            then readFace(meshBuffer, line, vertexBuffer, textureBuffer, normalBuffer) unless ObjLoadError

    }) unless ObjLoadError

    # automatically call free on buffers and close on file?
    vertexBuffer.free()
    textureBuffer.free()
    normalBuffer.free()

    meshBuffer
}: FloatBuffer unless ObjLoadError