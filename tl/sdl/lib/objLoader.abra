import abra.buffers with FloatBuffer
import abra.io
import abra.int

# bug by syntax design
def load = { fname: String ->
    val objFile = io.open(fname, 'r')
    val vertexBuffer = buffers.mkFloat(4)
    val textureBuffer = buffers.mkFloat(4)
    val normalBuffer = buffers.mkFloat(4)
    val meshBuffer = buffers.mkFloat(4)
    var hasLine = true

    while hasLine {
        val line = objFile.readLine()

        if line.isNullLine then hasLine = false
        else {
            if line.startsWith('v ') {
                val reader = line.toReader
                reader.drop('v '.length)
                vertexBuffer.push(reader.readFloat) # x
                vertexBuffer.push(reader.readFloat) # y
                vertexBuffer.push(reader.readFloat) # z
            }

            if line.startsWith('vt ') {
                val reader = line.toReader
                reader.drop('vt '.length)
                textureBuffer.push(reader.readFloat) # u
                textureBuffer.push(reader.readFloat) # v
            }

            if line.startsWith('vn ') {
                val reader = line.toReader
                reader.drop('vn '.length)
                normalBuffer.push(reader.readFloat) # nx
                normalBuffer.push(reader.readFloat) # ny
                normalBuffer.push(reader.readFloat) # nz
            }

            if line.startsWith('f ') {
                val reader = line.toReader
                reader.drop('f '.length)
                var i = 0
                while i < 3 {
                    val vertexId = reader.readInt - 1
                    meshBuffer.push(vertexBuffer(vertexId * 3))     # x
                    meshBuffer.push(vertexBuffer(vertexId * 3 + 1)) # y
                    meshBuffer.push(vertexBuffer(vertexId * 3 + 2)) # z
                    reader.drop('/'.length)

                    val uvId = reader.readInt - 1
                    meshBuffer.push(textureBuffer(uvId * 2))        # u
                    meshBuffer.push(textureBuffer(uvId * 2 + 1))    # v
                    reader.drop('/'.length)

                    val normalId = reader.readInt - 1
                    meshBuffer.push(normalBuffer(normalId * 3))     # nx
                    meshBuffer.push(normalBuffer(normalId * 3 + 1)) # ny
                    meshBuffer.push(normalBuffer(normalId * 3 + 2)) # nz

                    i = i + 1
                }
            }
        }
    }

    vertexBuffer.free()
    textureBuffer.free()
    normalBuffer.free()

    meshBuffer
}: FloatBuffer