import abra.int

def INIT_TIMER          = 0x00000001
def INIT_AUDIO          = 0x00000010
def INIT_VIDEO          = 0x00000020 # SDL_INIT_VIDEO implies SDL_INIT_EVENTS
def INIT_JOYSTICK       = 0x00000200 # SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS
def INIT_HAPTIC         = 0x00001000
def INIT_GAMECONTROLLER = 0x00002000 # SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK
def INIT_EVENTS         = 0x00004000
def INIT_NOPARACHUTE    = 0x00100000 # compatibility; this flag is ignored

# FIXME 1 - make INIT_TIMER as INIT_TIMER()
# FIXME 2 - allow \n between operands of infix operator
#def INIT_EVERYTHING = INIT_TIMER
#                or INIT_AUDIO
#                or INIT_VIDEO
#                or INIT_EVENTS
#                or INIT_JOYSTICK
#                or INIT_HAPTIC
#                or INIT_GAMECONTROLLER

def init: (mode: Int) -> Int = llvm {
    %1 = call i32 @SDL_Init(i32 %mode)
    ret i32 %1
}

type Window = llvm { i8* }
type GLContext = llvm { i8* }

def WINDOW_FULLSCREEN         = 0x00000001 # fullscreen window
def WINDOW_OPENGL             = 0x00000002 # window usable with OpenGL context
def WINDOW_SHOWN              = 0x00000004 # window is visible
def WINDOW_HIDDEN             = 0x00000008 # window is not visible
def WINDOW_BORDERLESS         = 0x00000010 # no window decoration
def WINDOW_RESIZABLE          = 0x00000020 # window can be resized
def WINDOW_MINIMIZED          = 0x00000040 # window is minimized
def WINDOW_MAXIMIZED          = 0x00000080 # window is maximized
def WINDOW_INPUT_GRABBED      = 0x00000100 # window has grabbed input focus
def WINDOW_INPUT_FOCUS        = 0x00000200 # window has input focus
def WINDOW_MOUSE_FOCUS        = 0x00000400 # window has mouse focus
def WINDOW_FULLSCREEN_DESKTOP = WINDOW_FULLSCREEN() or 0x00001000
def WINDOW_FOREIGN            = 0x00000800 # window not created by SDL
def WINDOW_ALLOW_HIGHDPI      = 0x00002000 # window should be created in high-DPI mode if supported
def WINDOW_MOUSE_CAPTURE      = 0x00004000 # window has mouse captured (unrelated to INPUT_GRABBED)

def createWindow: (title: String, x: Int, y: Int, w: Int, h: Int, flags: Int) -> Window = llvm {
    %1 = call i8* @SDL_CreateWindow(i8* %title, i32 %x, i32 %y, i32 %w, i32 %h, i32 %flags)
    ret i8* %1
}

def NO_EVENT      = 0x000
def EVENT_QUIT    = 0x100
def EVENT_KEYDOWN = 0x300

type EventData = llvm { [56 x i8] }
type Event = (eventType: Int, data: EventData)

def pollEvent: () -> Event = llvm {
    %1 = getelementptr %struct.lib.sdl.Event, %struct.lib.sdl.Event* %ret, i32 0, i32 0
    store i32 0, i32* %1
    %2 = bitcast %struct.lib.sdl.Event* %ret to i8*
    %3 = call i32 @SDL_PollEvent(i8* %2)
    ret void
}

def glCreateContext: (self: Window) -> GLContext = llvm {
    %1 = call i8* @SDL_GL_CreateContext(i8* %self)
    ret i8* %1
}

def glSwap: (self: Window) -> Unit = llvm {
    call void @SDL_GL_SwapWindow(i8* %self)
    ret void
}