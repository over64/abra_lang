import abra.int

def INIT_TIMER = 1
def INIT_AUDIO = 16
def INIT_VIDEO = 32  # SDL_INIT_VIDEO implies SDL_INIT_EVENTS
def INIT_JOYSTICK = 512 # SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS
def INIT_HAPTIC = 4096
def INIT_GAMECONTROLLER = 8192 # SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK
def INIT_EVENTS = 16384
def INIT_NOPARACHUTE = 1048576  # compatibility; this flag is ignored

#def INIT_EVERYTHING =
#                SDL_INIT_TIMER or SDL_INIT_AUDIO or SDL_INIT_VIDEO or SDL_INIT_EVENTS or
#                or SDL_INIT_JOYSTICK or SDL_INIT_HAPTIC or SDL_INIT_GAMECONTROLLER

def init: (mode: Int) -> Int = llvm {
    %1 = call i32 @SDL_Init(i32 %mode)
    ret i32 %1
}

type Window = llvm { i8* }
type GLContext = llvm { i8* }

def WINDOW_FULLSCREEN = 1         # fullscreen window
def WINDOW_OPENGL = 2         # window usable with OpenGL context
def WINDOW_SHOWN = 4          # window is visible
def WINDOW_HIDDEN = 8         # window is not visible
def WINDOW_BORDERLESS = 16     # no window decoration
def WINDOW_RESIZABLE = 32      # window can be resized
def WINDOW_MINIMIZED = 64      # window is minimized
def WINDOW_MAXIMIZED = 128      # window is maximized
def WINDOW_INPUT_GRABBED = 256  # window has grabbed input focus
def WINDOW_INPUT_FOCUS = 512    # window has input focus
def WINDOW_MOUSE_FOCUS = 1024    # window has mouse focus
def WINDOW_FULLSCREEN_DESKTOP = WINDOW_FULLSCREEN() or 4096
def WINDOW_FOREIGN = 2048        # window not created by SDL
def WINDOW_ALLOW_HIGHDPI = 8192  # window should be created in high-DPI mode if supported
def WINDOW_MOUSE_CAPTURE = 16384  # window has mouse captured (unrelated to INPUT_GRABBED)

def createWindow: (title: String, x: Int, y: Int, w: Int, h: Int, flags: Int) -> Window = llvm {
    %1 = call i8* @SDL_CreateWindow(i8* %title, i32 %x, i32 %y, i32 %w, i32 %h, i32 %flags)
    ret i8* %1
}

def NO_EVENT = 0
def EVENT_QUIT = 256
def EVENT_KEYDOWN = 768

type EventData = llvm { [56 x i8] }
type Event = (eventType: Int, data: EventData)

def pollEvent: () -> Event = llvm {
    %1 = getelementptr %struct.lib.sdl.Event, %struct.lib.sdl.Event* %ret, i32 0, i32 0
    store i32 0, i32* %1
    %2 = bitcast %struct.lib.sdl.Event* %ret to i8*
    %3 = call i32 @SDL_PollEvent(i8* %2)
    ret void
}

def glCreateContext: (self: Window) -> GLContext = llvm {
    %1 = call i8* @SDL_GL_CreateContext(i8* %self)
    ret i8* %1
}

def glSwap: (self: Window) -> Unit = llvm {
    call void @SDL_GL_SwapWindow(i8* %self)
    ret void
}