def +: (self: Int, other: Int) -> Int = llvm {
  %1 = add nsw i32 %self, %other
  ret i32 %1
}

type Foo = (x: Int)
def get = \self: Foo, i: Int, j: Int -> self.x + i + j
def set = \self: Foo, i: Int, j: Int, value: Int ->
    self.x = value + i + j

def main = {
    val f = Foo(1)
    f(0, 0) = 1
    f(1, 1)
}: Int # expected 3