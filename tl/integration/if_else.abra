def ==: (self: Boolean, other: Boolean) -> Boolean = llvm {
  %1 = icmp eq i1 %self, %other
  ret i1 %1
}

def +: (self: Int, other: Int) -> Int = llvm {
  %1 = add nsw i32 %self, %other
  ret i32 %1
}

type Foo = (x: Int, y: Int)

def toFoo = \self: Int -> Foo(self, self)

def main = {
    # if-else expression
    var a = if true == true then 1 else 0
    # if-else statement
    if true == true then a = a + 1 else a = a + 2

    # if-else with local vars
    if true == true {
        val b = 3
        a = a + b
        val foo = 1.toFoo
        a = a + foo.x
    }

    a
}: Int # 6 expected