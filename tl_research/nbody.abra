import math = abra.math
import sys = abra.sys
import io = abra.io enhance Double

def solarMass = 4.0 * math.pi * math.pi
def daysPerYear = 365.24

type Planet = (x: Double, y: Double, z: Double,
               vx: Double, vy: Double, vz: Double,
               mass: Double)

def advance = { bodies: Planet, dt: Double ->
  bodies.zipWithIndex forEach { of (i, b) ->
    (i + 1 to bodies.length) forEach { j ->
      bodies.unsafeUpdate(j, { b2 ->
        val (dx, dy, dz) = (b.x - b2.x, b.y - b2.y, b.z - b2.z)
        val dist2 = dx * dx + dy * dy + dz * dz
        val mag = dt / (dist2 * math.sqrt(dist2))

        b.vx = b.vx - dx * b2.mass * mag
        b.vy = b.vy - dy * b2.mass * mag
        b.vz = b.vz - dz * b2.mass * mag

        b2.vx = b2.vx + dx * b.mass * mag
        b2.vy = b2.vy + dy * b.mass * mag
        b2.vz = b2.vz + dz * b.mass * mag
      }
    }
  }

  bodies forEach { b ->
    b.x = b.x + dt * b.vx
    b.y = b.y + dt * b.vy
    b.z = b.z + dt * b.vz
  }
}: Unit

def energy = { bodies: Planet() ->
  var e = 0.0
  bodies.zipWithIndex forEach { of (i, b) ->
    e += 0.5 * b.mass * (b.vx * b.vx +. b.vy * b.vy +. b.vz * b.vz)
    (i + 1 to bodies.length) forEach { j ->
      val b2 = bodies.unsafeGet(j)
      val (dx, dy, dz) = (b.x - b2.x, b.y - b2.y, b.z - b2.z)
      val distance = math.sqrt(dx * dx +. dy * dy +. dz * dz)
      e -= b.mass * b2.mass / distance
    }
  }

  e
}: Double

def offsetMomentum = { bodies: Planet() ->
  var (px, py, pz) = (0.0, 0.0, 0.0)
  bodies forEach { b ->
    px += b.vx * b.mass
    py += b.vy * b.mass
    pz += b.vz * b.mass
  }
  bodies(0) match {
    of b: Planet ->
      b.vx = px / solarMass
      b.vy = py / solarMass
      b.vz = pz / solarMass
    of OutOfRange -> # dummy situation if empty array passed
  }
}: Unit

def mkBodies = {
  val sun = Planet(x = 0.0,  y = 0.0,  z = 0.0,  vx = 0.0,  vy = 0.0, vz = 0.0, mass = solarMass)

  val jupiter = Planet(
    x = 4.84143144246472090e+00,
    y = -1.16032004402742839e+00,
    z = -1.03622044471123109e-01,
    vx = 1.66007664274403694e-03 * daysPerYear,
    vy = 7.69901118419740425e-03 * daysPerYear,
    vz = -6.90460016972063023e-05 * daysPerYear,
    mass = 9.54791938424326609e-04 * solarMass)

  val saturn = Planet(
    x = 8.34336671824457987e+00,
    y = 4.12479856412430479e+00,
    z = -4.03523417114321381e-01,
    vx = -2.76742510726862411e-03 * daysPerYear,
    vy = 4.99852801234917238e-03 * daysPerYear,
    vz = 2.30417297573763929e-05 * daysPerYear,
    mass = 2.85885980666130812e-04 * solarMass)

  val uranus = Planet(
    x = 1.28943695621391310e+01,
    y = -1.51111514016986312e+01,
    z = -2.23307578892655734e-01,
    vx = 2.96460137564761618e-03 * daysPerYear,
    vy = 2.37847173959480950e-03 * daysPerYear,
    vz = -2.96589568540237556e-05 * daysPerYear,
    mass = 4.36624404335156298e-05 * solarMass)

  val neptune = Planet(
    x = 1.53796971148509165e+01,
    y = -2.59193146099879641e+01,
    z = 1.79258772950371181e-01,
    vx = 2.68067772490389322e-03 * daysPerYear,
    vy = 1.62824170038242295e-03 * daysPerYear,
    vz = -9.51592254519715870e-05 * daysPerYear,
    mass = 5.15138902046611451e-05 * solarMass)

    (sun, jupiter, saturn, uranus, neptune)
}: Planet(5)

error MainError = OutOfRange | ParseErr | IOErr

def main = {
  val bodies = mkBodies
  val n = sys.argv(1).?OutOfRange.toInt.?ParseErr

  offsetMomentum(bodies)
  energy(bodies).print(digits = 9).?IOErr

  (1 to n) times { advance(bodies, 0.01) }

  energy(bodies).print(digits = 9).?IOErr
}: Unit | MainError